{"version":3,"file":"videotime.min.js","sources":["../src/videotime.js"],"sourcesContent":["/*\n * Video time player specific js\n *\n * @package    videotimeplugin_videojs\n * @module     videotimeplugin_videojs/videotime\n * @copyright  2022 bdecent gmbh <https://bdecent.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from \"jquery\";\nimport VideoTimeBase from \"mod_videotime/videotime\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport Player from \"media_videojs/video-lazy\";\nimport Templates from \"core/templates\";\nimport \"media_videojs/Youtube-lazy\";\n\nexport default class VideoTime extends VideoTimeBase {\n\n    initialize() {\n        Log.debug('Initializing Video Time ' + this.elementId);\n\n        this.getInstance().then((instance) => {\n            let options = {\n                autoplay: instance.autoplay,\n                controls: instance.controls,\n                sources: [{type: instance.type, src: instance.vimeo_url}],\n                loop: instance.option_loop,\n                fluid: instance.responsive,\n                playbackRates: instance.speed ? [0.5, 0.75, 1, 1.25, 1.5, 2] : [1],\n                muted: instance.muted\n            };\n            if (instance.type === 'video/youtube') {\n                options.techOrder = ['youtube'];\n            }\n            if (!instance.responsive && instance.height && instance.width) {\n                options.height = instance.height;\n                options.width = instance.width;\n            }\n            Log.debug('Initializing VideoJS player with options:');\n            Log.debug(options);\n            this.player = new Player(this.elementId, options);\n\n            this.player.on('loadedmetadata', () => {\n                if (!instance.resume_playback || instance.resume_time <= 0) {\n                    return true;\n                }\n\n                let duration = this.getPlayer().duration(),\n                    resumeTime = instance.resume_time;\n                // Duration is often a little greater than a resume time at the end of the video.\n                // A user may have watched 100 seconds when the video ends, but the duration may be\n                // 100.56 seconds. BUT, sometimes the duration is rounded depending on when the\n                // video loads, so it may be 101 seconds. Hence the +1 and Math.floor usage.\n                if (resumeTime + 1 >= Math.floor(duration)) {\n                    Log.debug('VIDEO_TIME video finished, resuming at start of video.');\n                    resumeTime = 0;\n                }\n                Log.debug('VIDEO_TIME duration is ' + duration);\n                Log.debug('VIDEO_TIME resuming at ' + resumeTime);\n                this.setCurrentPosition(resumeTime);\n                return true;\n            });\n\n            let url = new URL(window.location.href),\n                q = url.searchParams.get('q'),\n                starttime = (url.searchParams.get('time') || '').match(/^([0-9]+:){0,2}([0-9]+)(\\.[0-9]+)$/);\n            if (starttime) {\n                this.setStartTime(starttime[0]).then(function() {\n                    if (q && window.find) {\n                        window.find(q);\n                    }\n                    return true;\n                }).catch(Notification.exception);\n            } else if (q && window.find) {\n                window.find(q);\n            }\n\n            this.addListeners();\n\n            for (let i = 0; i < this.plugins.length; i++) {\n                const plugin = this.plugins[i];\n                plugin.initialize(this, instance);\n            }\n\n            return true;\n        }).catch(Notification.exeption);\n    }\n\n    /**\n     * Register player events to respond to user interaction and play progress.\n     */\n    addListeners() {\n        if (!this.player) {\n            Log.debug('Player was not properly initialized for course module ' + this.cmId);\n            return;\n        }\n\n        // Fire view event in Moodle on first play only.\n        this.player.on('play', () => {\n            if (!this.played) {\n                if (this.hasPro) {\n                    // Getting a new session on first play.\n                    this.getSession().then(() => {\n                        this.view();\n                        this.startWatchInterval();\n                        return true;\n                    }).catch(Notification.exception);\n                } else {\n                    // Free version can still mark completion on video time view.\n                    this.view();\n                }\n            }\n            return true;\n        });\n\n        // Features beyond this point are for pro only.\n        if (!this.hasPro) {\n            return;\n        }\n\n        // Note: Vimeo player does not support multiple events in a single on() call. Each requires it's own function.\n\n        // Catch all events where video plays.\n        this.player.on('play', function() {\n            this.playing = true;\n            Log.debug('VIDEO_TIME play');\n        }.bind(this));\n        this.player.on('playing', function() {\n            this.playing = true;\n            Log.debug('VIDEO_TIME playing');\n        }.bind(this));\n\n        // Catch all events where video stops.\n        this.player.on('pause', function() {\n            this.playing = false;\n            Log.debug('VIDEO_TIME pause');\n        }.bind(this));\n        this.player.on('stalled', function() {\n            this.playing = false;\n            Log.debug('VIDEO_TIME stalled');\n        }.bind(this));\n        this.player.on('suspend', function() {\n            this.playing = false;\n            Log.debug('VIDEO_TIME suspend');\n        }.bind(this));\n        this.player.on('abort', function() {\n            this.playing = false;\n            Log.debug('VIDEO_TIME abort');\n        }.bind(this));\n\n        this.player.on('playbackrateschange', function() {\n            this.playbackRate = this.player.playbackRate();\n        }.bind(this));\n\n        // Always update internal values for percent and current time watched.\n        this.player.on('timeupdate', function() {\n            this.currentTime = this.player.currentTime();\n            this.percent = this.currentTime / this.player.duration();\n            Log.debug('VIDEO_TIME timeupdate. Percent: ' + this.percent + '. Current time: ' + this.currentTime);\n        }.bind(this));\n\n        // Initiate video finish procedure.\n        this.player.on('ended', function() {\n            this.playing = false;\n            Log.debug('VIDEO_TIME ended');\n\n            new Promise(function(resolve) {\n                this.getSession().then(function(session) {\n                    resolve(session);\n                    return true;\n                }).catch(Notification.exception);\n            }.bind(this)).then(function(session) {\n                this.setSessionState(session.id, 1);\n                return session;\n            }.bind(this)).then(function(session) {\n                this.setPercent(session.id, 1);\n                return session;\n            }.bind(this)).then(function(session) {\n                this.setCurrentTime(session.id, this.currentTime);\n                return session;\n            }.bind(this)).catch(Notification.exception).finally(function() {\n                this.getSession().then(function(session) {\n                    this.getNextActivityButtonData(session.id).then(function(response) {\n                        let data = JSON.parse(response.data);\n\n                        if (data.instance && parseInt(data.instance.next_activity_auto)) {\n                            if (!data.is_restricted && data.hasnextcm) {\n                                let link = $('.aalink[href=\"' + data.nextcm_url + '\"] img').first();\n                                if ($('.path-course-view').length && link) {\n                                    link.click();\n                                } else {\n                                    window.location.href = data.nextcm_url;\n                                }\n                            }\n                        }\n\n                        Templates.render('videotime/next_activity_button', JSON.parse(response.data))\n                            .then(function(html) {\n                                $('#next-activity-button').html(html);\n                                return true;\n                            }).fail(Notification.exception);\n                        return true;\n                    }).fail(Notification.exception);\n                }.bind(this)).catch(Notification.exception);\n            }.bind(this)).fail(Notification.exception);\n        }.bind(this));\n\n        // If this is a tab play set time cues and listener.\n        $($('#' + this.elementId).closest('.videotimetabs')).each(function(i, tabs) {\n           $(tabs).find('[data-action=\"cue\"]').each(function(index, anchor) {\n                let starttime = anchor.getAttribute('data-start'),\n                    time = starttime.match(/((([0-9]+):)?(([0-9]+):))?([0-9]+(\\.[0-9]+))/);\n                if (time) {\n                    this.player.addCuePoint(\n                        3600 * Number(time[3] || 0) + 60 * Number(time[5] || 0) + Number(time[6]),\n                        {\n                            starttime: starttime\n                        }\n                    ).catch(Notification.exeception);\n                }\n            }.bind(this));\n\n            this.player.on('cuepoint', function(event) {\n                if (event.data.starttime) {\n                    $(tabs).find('.videotime-highlight').removeClass('videotime-highlight');\n                    $(tabs).find('[data-action=\"cue\"][data-start=\"' + event.data.starttime + '\"]')\n                        .closest('.row')\n                        .addClass('videotime-highlight');\n                    $('.videotime-highlight').each(function() {\n                        if (this.offsetTop) {\n                            this.parentNode.scrollTo({\n                                top: this.offsetTop - 50,\n                                left: 0,\n                                behavior: 'smooth'\n                            });\n                        }\n                    });\n                }\n            });\n        }.bind(this));\n\n        // Readjust height when responsive player is resized.\n        if (this.player.options().responsive) {\n            let observer = new ResizeObserver(() => {\n                this.player.height(this.player.videoHeight() / this.player.videoWidth() * this.player.currentWidth());\n            });\n            observer.observe(document.querySelector('#' + this.elementId));\n        }\n    }\n\n    /**\n     * Parse start time and set player\n     *\n     * @param {string} starttime\n     * @returns {Promise}\n     */\n    setStartTime(starttime) {\n        let time = starttime.match(/((([0-9]+):)?(([0-9]+):))?([0-9]+(\\.[0-9]+))/);\n        if (time) {\n            this.resumeTime = 3600 * Number(time[3] || 0) + 60 * Number(time[5] || 0) + Number(time[6]);\n            return this.player.currentTime(this.resumeTime);\n        }\n        Log.debug('Set start time:' + starttime);\n        return this.player.currentTime();\n    }\n\n    /**\n     * Get play back rate\n     *\n     * @returns {Promise}\n     */\n    getDuration() {\n        return new Promise((resolve) => {\n            resolve(this.player.duration());\n            return true;\n        });\n    }\n\n    /**\n     * Get duration of video\n     *\n     * @returns {Promise}\n     */\n    getPlaybackRate() {\n        return new Promise((resolve) => {\n            resolve(this.player.playbackRate());\n            return true;\n        });\n    }\n\n    /**\n     * Set current time of player\n     *\n     * @param {float} secs time\n     * @returns {Promise}\n     */\n    setCurrentPosition(secs) {\n        return new Promise((resolve) => {\n            resolve(this.player.currentTime(secs));\n            return true;\n        });\n    }\n\n    /**\n     * Get current time of player\n     *\n     * @returns {Promise}\n     */\n    getCurrentPosition() {\n        return new Promise((resolve) => {\n            resolve(this.player.currentTime());\n            return true;\n        });\n    }\n}\n"],"names":["VideoTime","debug","this","elementId","getInstance","then","instance","options","autoplay","controls","sources","type","src","vimeo_url","loop","option_loop","fluid","responsive","playbackRates","speed","muted","techOrder","height","width","_this","player","Player","on","resume_playback","resume_time","duration","getPlayer","resumeTime","Math","floor","setCurrentPosition","url","URL","window","location","href","q","searchParams","get","starttime","match","setStartTime","find","catch","Notification","exception","addListeners","i","plugins","length","initialize","exeption","_this2","played","hasPro","getSession","view","startWatchInterval","playing","bind","playbackRate","currentTime","percent","Promise","resolve","session","setSessionState","id","setPercent","setCurrentTime","finally","getNextActivityButtonData","response","data","JSON","parse","parseInt","next_activity_auto","is_restricted","hasnextcm","link","nextcm_url","first","click","render","html","fail","closest","each","tabs","index","anchor","getAttribute","time","addCuePoint","Number","exeception","event","removeClass","addClass","offsetTop","parentNode","scrollTo","top","left","behavior","ResizeObserver","videoHeight","videoWidth","currentWidth","observe","document","querySelector","cmId","_this3","_this4","secs","_this5","_this6","VideoTimeBase"],"mappings":"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"}