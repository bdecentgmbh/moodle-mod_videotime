{"version":3,"file":"videotime.min.js","sources":["../src/videotime.js"],"sourcesContent":["/*\n * Video time player specific js\n *\n * @package    videotimeplugin_videojs\n * @module     videotimeplugin_videojs/videotime\n * @copyright  2022 bdecent gmbh <https://bdecent.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport VideoTimeBase from \"mod_videotime/videotime\";\nimport Log from \"core/log\";\nimport Player from \"media_videojs/video-lazy\";\nimport \"media_videojs/Youtube-lazy\";\n\nexport default class VideoTime extends VideoTimeBase {\n    initialize() {\n        Log.debug(\"Initializing Video Time \" + this.elementId);\n\n        const instance = this.instance,\n            options = {\n                autoplay: Number(instance.autoplay),\n                controls: Number(instance.controls),\n                sources: [{type: instance.type, src: instance.vimeo_url}],\n                loop: Number(instance.option_loop),\n                fluid: Number(instance.responsive),\n                playsinline: Number(instance.playsinline),\n                playbackRates: Number(instance.speed)\n                    ? [0.5, 0.75, 1, 1.25, 1.5, 2]\n                    : [1],\n                muted: Number(instance.muted)\n            };\n        if (instance.type === \"video/youtube\") {\n            options.techOrder = [\"youtube\"];\n        }\n        if (!Number(instance.responsive) && Number(instance.height) && Number(instance.width)) {\n            options.height = Number(instance.height);\n            options.width = Number(instance.width);\n        }\n        Log.debug(\"Initializing VideoJS player with options:\");\n        Log.debug(options);\n        this.player = new Player(this.elementId, options);\n\n        this.player.one(\"canplay\", () => {\n            if (!instance.resume_playback || instance.resume_time <= 0 || this.resumed) {\n                return true;\n            }\n\n            let duration = this.getPlayer().duration(),\n                resumeTime = instance.resume_time;\n            // Duration is often a little greater than a resume time at the end of the video.\n            // A user may have watched 100 seconds when the video ends, but the duration may be\n            // 100.56 seconds. BUT, sometimes the duration is rounded depending on when the\n            // video loads, so it may be 101 seconds. Hence the +1 and Math.floor usage.\n            if (resumeTime + 1 >= Math.floor(duration)) {\n                Log.debug(\n                    \"VIDEO_TIME video finished, resuming at start of video.\"\n                );\n                resumeTime = 0;\n            }\n            Log.debug(\"VIDEO_TIME duration is \" + duration);\n            Log.debug(\"VIDEO_TIME resuming at \" + resumeTime);\n            if (resumeTime) {\n                setTimeout(() => {\n                this.setCurrentPosition(resumeTime);\n                }, 10);\n            }\n            return true;\n        });\n\n        this.handleStartTime();\n\n        this.addListeners();\n\n        for (let i = 0; i < this.plugins.length; i++) {\n            const plugin = this.plugins[i];\n            plugin.initialize(this, instance);\n        }\n\n        return true;\n    }\n\n    /**\n     * Register player events to respond to user interaction and play progress.\n     */\n    async addListeners() {\n        if (!this.player) {\n            Log.debug(\n                \"Player was not properly initialized for course module \" +\n                    this.cmId\n            );\n            return;\n        }\n\n        // Fire view event in Moodle on first play only.\n        this.player.on(\"play\", () => {\n            if (!this.played) {\n                if (this.hasPro) {\n                    this.startWatchInterval();\n                }\n                // Free version can still mark completion on video time view.\n                this.view();\n            }\n            return true;\n        });\n\n        // Features beyond this point are for pro only.\n        if (!this.hasPro) {\n            return;\n        }\n\n        // Initiate video finish procedure.\n        this.player.on(\"ended\", this.handleEnd.bind(this));\n        this.player.on(\"pause\", this.handlePause.bind(this));\n\n        // Readjust height when responsive player is resized.\n        if (this.player.options().responsive) {\n            let observer = new ResizeObserver(() => {\n                this.player.height(\n                    (this.player.videoHeight() / this.player.videoWidth()) *\n                        this.player.currentWidth()\n                );\n            });\n            observer.observe(document.querySelector(\"#\" + this.elementId));\n        }\n    }\n\n    /**\n     * Parse start time and set player\n     *\n     * @param {string} starttime\n     * @returns {Promise}\n     */\n    async setStartTime(starttime) {\n        let time = starttime.match(\n            /((([0-9]+):)?(([0-9]+):))?([0-9]+(\\.[0-9]+))/\n        );\n        if (time) {\n            this.resumeTime =\n                3600 * Number(time[3] || 0) +\n                60 * Number(time[5] || 0) +\n                Number(time[6]);\n            return await this.player.currentTime(this.resumeTime);\n        }\n        Log.debug(\"Set start time:\" + starttime);\n        return await this.player.currentTime();\n    }\n\n    /**\n     * Get play back rate\n     *\n     * @returns {Promise}\n     */\n    getDuration() {\n        return new Promise(resolve => {\n            resolve(this.player.duration());\n            return true;\n        });\n    }\n\n    /**\n     * Get duration of video\n     *\n     * @returns {Promise}\n     */\n    getPlaybackRate() {\n        return new Promise(resolve => {\n            resolve(this.player.playbackRate());\n            return true;\n        });\n    }\n\n    /**\n     * Set current time of player\n     *\n     * @param {float} secs time\n     * @returns {Promise}\n     */\n    setCurrentPosition(secs) {\n        return new Promise(resolve => {\n            resolve(this.player.currentTime(secs));\n            return true;\n        });\n    }\n\n    /**\n     * Get current time of player\n     *\n     * @returns {Promise}\n     */\n    async getCurrentPosition() {\n        let position = await this.player.currentTime();\n        this.plugins.forEach(async plugin => {\n            if (plugin.getCurrentPosition) {\n                position = await plugin.getCurrentPosition(position);\n            }\n        });\n        return position;\n    }\n\n    /**\n     * Get pause state\n     *\n     * @return {bool}\n     */\n    getPaused() {\n        const paused = this.player.paused();\n        return paused;\n    }\n}\n"],"names":["VideoTime","VideoTimeBase","initialize","debug","this","elementId","instance","options","autoplay","Number","controls","sources","type","src","vimeo_url","loop","option_loop","fluid","responsive","playsinline","playbackRates","speed","muted","techOrder","height","width","player","Player","one","resume_playback","resume_time","resumed","duration","getPlayer","resumeTime","Math","floor","setTimeout","setCurrentPosition","handleStartTime","addListeners","i","plugins","length","on","played","hasPro","startWatchInterval","view","handleEnd","bind","handlePause","ResizeObserver","videoHeight","videoWidth","currentWidth","observe","document","querySelector","cmId","starttime","time","match","currentTime","getDuration","Promise","resolve","getPlaybackRate","playbackRate","secs","position","forEach","async","plugin","getCurrentPosition","getPaused","paused"],"mappings":";;;;;;;;yNAcqBA,kBAAkBC,mBACnCC,0BACQC,MAAM,2BAA6BC,KAAKC,iBAEtCC,SAAWF,KAAKE,SAClBC,QAAU,CACNC,SAAUC,OAAOH,SAASE,UAC1BE,SAAUD,OAAOH,SAASI,UAC1BC,QAAS,CAAC,CAACC,KAAMN,SAASM,KAAMC,IAAKP,SAASQ,YAC9CC,KAAMN,OAAOH,SAASU,aACtBC,MAAOR,OAAOH,SAASY,YACvBC,YAAaV,OAAOH,SAASa,aAC7BC,cAAeX,OAAOH,SAASe,OACzB,CAAC,GAAK,IAAM,EAAG,KAAM,IAAK,GAC1B,CAAC,GACPC,MAAOb,OAAOH,SAASgB,QAET,kBAAlBhB,SAASM,OACTL,QAAQgB,UAAY,CAAC,aAEpBd,OAAOH,SAASY,aAAeT,OAAOH,SAASkB,SAAWf,OAAOH,SAASmB,SAC3ElB,QAAQiB,OAASf,OAAOH,SAASkB,QACjCjB,QAAQkB,MAAQhB,OAAOH,SAASmB,qBAEhCtB,MAAM,0DACNA,MAAMI,cACLmB,OAAS,IAAIC,mBAAOvB,KAAKC,UAAWE,cAEpCmB,OAAOE,IAAI,WAAW,SAClBtB,SAASuB,iBAAmBvB,SAASwB,aAAe,GAAK1B,KAAK2B,eACxD,MAGPC,SAAW5B,KAAK6B,YAAYD,WAC5BE,WAAa5B,SAASwB,mBAKtBI,WAAa,GAAKC,KAAKC,MAAMJ,yBACzB7B,MACA,0DAEJ+B,WAAa,gBAEb/B,MAAM,0BAA4B6B,uBAClC7B,MAAM,0BAA4B+B,YAClCA,YACAG,YAAW,UACNC,mBAAmBJ,cACrB,KAEA,UAGNK,uBAEAC,mBAEA,IAAIC,EAAI,EAAGA,EAAIrC,KAAKsC,QAAQC,OAAQF,IAAK,CAC3BrC,KAAKsC,QAAQD,GACrBvC,WAAWE,KAAME,iBAGrB,0BAOFF,KAAKsB,gBASLA,OAAOkB,GAAG,QAAQ,KACdxC,KAAKyC,SACFzC,KAAK0C,aACAC,0BAGJC,SAEF,KAIN5C,KAAK0C,cAKLpB,OAAOkB,GAAG,QAASxC,KAAK6C,UAAUC,KAAK9C,YACvCsB,OAAOkB,GAAG,QAASxC,KAAK+C,YAAYD,KAAK9C,OAG1CA,KAAKsB,OAAOnB,UAAUW,YAAY,CACnB,IAAIkC,gBAAe,UACzB1B,OAAOF,OACPpB,KAAKsB,OAAO2B,cAAgBjD,KAAKsB,OAAO4B,aACrClD,KAAKsB,OAAO6B,mBAGfC,QAAQC,SAASC,cAAc,IAAMtD,KAAKC,+BApC/CF,MACA,yDACIC,KAAKuD,yBA4CFC,eACXC,KAAOD,UAAUE,MACjB,uDAEAD,WACK3B,WACD,KAAOzB,OAAOoD,KAAK,IAAM,GACzB,GAAKpD,OAAOoD,KAAK,IAAM,GACvBpD,OAAOoD,KAAK,UACHzD,KAAKsB,OAAOqC,YAAY3D,KAAK8B,2BAE1C/B,MAAM,kBAAoByD,iBACjBxD,KAAKsB,OAAOqC,eAQ7BC,qBACW,IAAIC,SAAQC,UACfA,QAAQ9D,KAAKsB,OAAOM,aACb,KASfmC,yBACW,IAAIF,SAAQC,UACfA,QAAQ9D,KAAKsB,OAAO0C,iBACb,KAUf9B,mBAAmB+B,aACR,IAAIJ,SAAQC,UACfA,QAAQ9D,KAAKsB,OAAOqC,YAAYM,QACzB,oCAUPC,eAAiBlE,KAAKsB,OAAOqC,0BAC5BrB,QAAQ6B,SAAQC,MAAAA,SACbC,OAAOC,qBACPJ,eAAiBG,OAAOC,mBAAmBJ,cAG5CA,SAQXK,mBACmBvE,KAAKsB,OAAOkD"}