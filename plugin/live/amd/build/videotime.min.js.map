{"version":3,"file":"videotime.min.js","sources":["../src/videotime.js"],"sourcesContent":["/*\n * Video time player specific js\n *\n * @package    videotimeplugin_live\n * @module     videotimeplugin_live/videotime\n * @copyright  2022 bdecent gmbh <https://bdecent.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport VideoTimeBase from \"mod_videotime/videotime\";\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport PublishBase from \"block_deft/publish\";\nimport SubscribeBase from \"block_deft/subscribe\";\nimport Socket from \"videotimeplugin_live/socket\";\n\nvar rooms = {};\n\nclass Publish extends PublishBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: this.ptype == 'publish',\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0];\n    }\n\n    getTransceiver(id) {\n        let result = null;\n\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n            this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                const sender = transceiver.sender;\n                if (\n                    sender.track\n                    && sender.track.id\n                    && (!id || sender.track.id == id)\n                    && this.tracks[sender.track.id]\n                ) {\n                    result = transceiver;\n                }\n            });\n        }\n\n        return result;\n    }\n\n    publishFeed() {\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n            setTimeout(() => {\n                this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                    const sender = transceiver.sender;\n                    if (\n                        sender.track\n                        && this.selectedTrack\n                        && (sender.track.id == this.selectedTrack.id)\n                    ) {\n                        const message = JSON.stringify({\n                            feed: Number(this.peerid),\n                            mid: transceiver.mid\n                        });\n                        this.videoroom.data({\n                            text: message,\n                            error: Log.debug\n                        });\n                    }\n                });\n                return Ajax.call([{\n                    args: {\n                        id: Number(this.peerid),\n                        room: this.roomid,\n                    },\n                    contextid: this.contextid,\n                    fail: Notification.exception,\n                    methodname: 'videotimeplugin_live_publish_feed'\n                }])[0];\n            });\n        }\n    }\n\n    unpublish() {\n        Ajax.call([{\n            args: {\n                id: Number(this.peerid),\n                publish: false,\n                room: this.roomid\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_publish_feed'\n        }]);\n\n        if (this.videoInput) {\n            this.videoroom.send({\n                message: {\n                    request: 'unpublish'\n                }\n            });\n        }\n\n        [\n            this.currentCamera,\n            this.currentDisplay,\n        ].forEach(videoInput => {\n            if (videoInput) {\n                videoInput.then(videoStream => {\n                    if (videoStream) {\n                        videoStream.getTracks().forEach(track => {\n                            track.stop();\n                        });\n                    }\n\n                    return null;\n                }).catch(Notification.exception);\n            }\n        });\n        this.currentCamera = null;\n        this.currentDisplay = null;\n        this.videoInput = null;\n\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n\n            this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                transceiver.stop();\n            });\n        }\n        this.tracks = {};\n    }\n\n    onLocalTrack(track, on) {\n        const remoteStream = new MediaStream([track]);\n        if (!on) {\n            this.videoInput.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getTracks().forEach(current => {\n                        if (current.id == track.id) {\n                            this.unpublish();\n                        }\n                    });\n                }\n                return videoStream;\n            }).catch(Notification.exception);\n\n            return;\n        }\n        remoteStream.mid = track.mid;\n        Log.debug(remoteStream);\n        Janus.attachMediaStream(\n            document.getElementById('video-controls-' + this.tracks[track.id]),\n            remoteStream\n        );\n    }\n\n    handleClick(e) {\n        const button = e.target.closest(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"],  [data-contextid=\"'\n                + this.contextid + '\"][data-action=\"unpublish\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                type = button.getAttribute('data-type') || 'camera';\n            e.stopPropagation();\n            e.preventDefault();\n            document.querySelectorAll(\n                '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n            ).forEach(button => {\n                if ((button.getAttribute('data-action') != action) || (button.getAttribute('data-type') != type)) {\n                    button.classList.remove('hidden');\n                }\n            });\n            switch (action) {\n                case 'publish':\n                    Log.debug(type);\n                    if (type == 'display') {\n                        this.shareDisplay();\n                    } else {\n                        this.shareCamera();\n                    }\n\n                    this.videoInput.then(videoStream => {\n                        const tracks = [];\n                        this.tracks = this.tracks || {};\n                        if (videoStream) {\n                            Log.debug(videoStream.getVideoTracks());\n                            videoStream.getVideoTracks().forEach(track => {\n                                const transceiver = this.getTransceiver(track.id);\n                                if (!transceiver) {\n                                    tracks.push({\n                                        type: 'video',\n                                        capture: track,\n                                        recv: false\n                                    });\n                                    this.selectedTrack = track;\n                                    this.tracks[track.id] = type;\n                                    Log.debug('New track');\n                                } else {\n                                    const message = JSON.stringify({\n                                        feed: Number(this.peerid),\n                                        mid: transceiver.mid\n                                    });\n                                    this.videoroom.data({\n                                        text: message,\n                                        error: Log.debug\n                                    });\n                                    this.selectedTrack = track.id;\n                                    this.publishFeed();\n                                }\n                            });\n                            videoStream.getAudioTracks().forEach(track => {\n                                tracks.push({\n                                    type: 'audio',\n                                    capture: track,\n                                    recv: false\n                                });\n                            });\n                            if (!tracks.length) {\n                                return videoStream;\n                            }\n                            this.videoroom.createOffer({\n                                tracks: tracks,\n                                success: (jsep) => {\n                                    const publish = {\n                                        request: \"configure\",\n                                        video: true,\n                                        audio: true\n                                    };\n                                    this.videoroom.send({\n                                        message: publish,\n                                        jsep: jsep\n                                    });\n                                },\n                                error: function(error) {\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n                        }\n\n                        return videoStream;\n                    }).catch(Notification.exception);\n                    break;\n                case 'unpublish':\n                    this.unpublish();\n                    break;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Set video source to user camera\n     */\n    shareCamera() {\n        const videoInput = this.videoInput,\n            currentCamera = this.currentCamera || Promise.resolve(null);\n\n        this.videoInput = currentCamera.then(videoStream => {\n            if (videoStream) {\n                return videoStream;\n            } else {\n                const cameraInput = navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: false\n                });\n\n                this.currentCamera = cameraInput.catch(() => {\n                    return currentCamera;\n                });\n\n                return cameraInput.then(videoStream => {\n                    this.tracks = this.tracks || {};\n                    videoStream.getTracks().forEach(track => {\n                        this.tracks[track.id] = 'camera';\n                    });\n\n                    return videoStream;\n                }).catch((e) => {\n                    Log.debug(e);\n\n                    return videoInput;\n                });\n            }\n        });\n    }\n\n    /**\n     * Set video source to display surface\n     */\n    shareDisplay() {\n        const videoInput = this.videoInput,\n            currentDisplay = this.currentDisplay || Promise.resolve(null),\n            displayInput = navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: false\n        });\n\n        this.videoInput = displayInput.then(videoStream => {\n            this.tracks = this.tracks || {};\n            videoStream.getTracks().forEach(track => {\n                this.tracks[track.id] = 'display';\n            });\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return videoInput;\n        });\n\n        this.currentDisplay = displayInput.then(videoStream => {\n            if (videoStream) {\n                currentDisplay.then(videoStream => {\n                    if (videoStream) {\n                        videoStream.getTracks().forEach(track => {\n                            track.stop();\n                        });\n                    }\n\n                    return videoStream;\n                }).catch(Notification.exception);\n            }\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return currentDisplay;\n        });\n    }\n}\n\nexport default class VideoTime extends VideoTimeBase {\n    initialize(contextid, token, peerid) {\n        Log.debug(\"Initializing Video Time \" + this.elementId);\n\n        this.contextid = contextid;\n        this.peerid = peerid;\n\n        Ajax.call([{\n            methodname: 'videotimeplugin_live_get_room',\n            args: {contextid: contextid},\n            done: (response) => {\n                const socket = new Socket(contextid, token);\n\n                this.iceservers = JSON.parse(response.iceservers);\n                this.roomid = response.roomid;\n                this.server = response.server;\n\n                rooms[String(contextid)] = {\n                    contextid: contextid,\n                    peerid: peerid,\n                    roomid: response.roomid,\n                    server: response.server,\n                    iceServers: JSON.parse(response.iceservers)\n                };\n                this.roomid = response.roomid;\n\n                socket.subscribe(() => {\n                    Ajax.call([{\n                        methodname: 'videotimeplugin_live_get_feed',\n                        args: {contextid: contextid},\n                        done: (response) => {\n                            const room = rooms[String(contextid)];\n                            if (room.publish && room.publish.restart) {\n                                if (response.feed == peerid) {\n                                    this.unpublish();\n                                }\n                                room.publish = null;\n                            }\n                            this.subscribeTo(Number(response.feed));\n                        },\n                        fail: Notification.exception\n                    }]);\n                });\n            },\n            fail: Notification.exception\n        }]);\n\n        this.addListeners();\n\n        return true;\n    }\n\n    /**\n     * Register player events to respond to user interaction and play progress.\n     */\n    addListeners() {\n        document.querySelector('body').removeEventListener('click', handleClick);\n        document.querySelector('body').addEventListener('click', handleClick);\n        return;\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     */\n    subscribeTo(source) {\n\n        if (this.remoteFeed && !this.remoteFeed.creatingSubscription && !this.remoteFeed.restart) {\n            const update = {\n                request: 'update',\n                subscribe: [{\n                    feed: Number(source)\n                }],\n                unsubscribe: [{\n                    feed: Number(this.remoteFeed.current)\n                }]\n            };\n\n            if (!source && this.remoteFeed.current) {\n                delete update.subscribe;\n            } else if (source && !this.remoteFeed.current) {\n                delete update.unsubscribe;\n            }\n\n            if (this.remoteFeed.current != source) {\n                Log.debug('[data-contextid=\"' + this.contextid + '\"] img.poster-img');\n                if (source) {\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                        img.classList.add('hidden');\n                    });\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                        img.classList.remove('hidden');\n                    });\n                } else {\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                        img.classList.remove('hidden');\n                    });\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                        img.classList.add('hidden');\n                    });\n                }\n                this.remoteFeed.videoroom.send({message: update});\n                if (this.remoteFeed.current == this.peerid) {\n                    const room = rooms[String(this.contextid)];\n                    room.publish.unpublish();\n                }\n                this.remoteFeed.current = source;\n                if (!source) {\n                    if (this.remoteFeed && this.remoteFeed.janus) {\n                        this.remoteFeed.janus.destroy();\n                    }\n                    this.remoteFeed = null;\n                }\n            }\n        } else if (this.remoteFeed && this.remoteFeed.restart) {\n            if (this.remoteFeed.current != source) {\n                if (this.remoteFeed && this.remoteFeed.janus) {\n                    this.remoteFeed.janus.destroy();\n                }\n                this.remoteFeed = null;\n                this.subscribeTo(source);\n            }\n        } else if (this.remoteFeed) {\n            setTimeout(() => {\n                this.subscribeTo(source);\n            }, 500);\n        } else if (source) {\n            this.remoteFeed = new Subscribe(this.contextid, this.iceservers, this.roomid, this.server, this.peerid, source);\n            this.remoteFeed.remoteVideo = document.getElementById(this.elementId);\n            this.remoteFeed.remoteAudio = document.getElementById(this.elementId).parentNode.querySelector('audio');\n            this.remoteFeed.startConnection(source);\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                img.classList.add('hidden');\n            });\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                img.classList.remove('hidden');\n            });\n        }\n    }\n}\n\nconst handleClick = function(e) {\n    const button = e.target.closest('[data-roomid] [data-action=\"publish\"], [data-roomid] [data-action=\"unpublish\"]');\n    if (button) {\n        const action = button.getAttribute('data-action'),\n            contextid = e.target.closest('[data-contextid]').getAttribute('data-contextid'),\n            room = rooms[String(contextid)],\n            iceServers = room.iceServers,\n            peerid = room.peerid,\n            roomid = room.roomid,\n            server = room.server,\n            type = button.getAttribute('data-type');\n        e.stopPropagation();\n        e.preventDefault();\n        if (action == 'unpublish') {\n            Ajax.call([{\n                args: {\n                    id: Number(peerid),\n                    room: roomid,\n                    publish: false\n                },\n                contextid: contextid,\n                fail: Notification.exception,\n                methodname: 'videotimeplugin_live_publish_feed'\n            }]);\n        } else if (!room.publish || room.publish.restart) {\n            room.publish = new Publish(contextid, iceServers, roomid, server, peerid);\n            if (type == 'display') {\n                room.publish.shareDisplay();\n            } else {\n                room.publish.shareCamera();\n            }\n            room.publish.startConnection();\n        } else {\n            room.publish.handleClick(e);\n        }\n    }\n};\n\nclass Subscribe extends SubscribeBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: false,\n                feed: this.feed,\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0];\n    }\n}\n"],"names":["rooms","Publish","PublishBase","register","pluginHandle","Ajax","call","args","handle","getId","id","Number","this","peerid","plugin","room","roomid","ptype","session","getSessionId","contextid","fail","Notification","exception","methodname","getTransceiver","result","videoroom","webrtcStuff","pc","iceConnectionState","getTransceivers","forEach","transceiver","sender","track","tracks","publishFeed","setTimeout","selectedTrack","message","JSON","stringify","feed","mid","data","text","error","Log","debug","unpublish","publish","videoInput","send","request","currentCamera","currentDisplay","then","videoStream","getTracks","stop","catch","onLocalTrack","on","remoteStream","MediaStream","attachMediaStream","document","getElementById","current","handleClick","e","button","target","closest","action","getAttribute","type","stopPropagation","preventDefault","querySelectorAll","classList","remove","shareDisplay","shareCamera","getVideoTracks","push","capture","recv","getAudioTracks","length","createOffer","success","jsep","video","audio","alert","Promise","resolve","cameraInput","navigator","mediaDevices","getUserMedia","displayInput","getDisplayMedia","VideoTime","VideoTimeBase","initialize","token","elementId","done","response","socket","Socket","iceservers","parse","server","String","iceServers","subscribe","restart","subscribeTo","addListeners","querySelector","removeEventListener","addEventListener","source","remoteFeed","creatingSubscription","janus","destroy","Subscribe","remoteVideo","remoteAudio","parentNode","startConnection","img","add","update","unsubscribe","SubscribeBase"],"mappings":"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"}