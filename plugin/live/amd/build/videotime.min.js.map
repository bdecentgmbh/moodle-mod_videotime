{"version":3,"file":"videotime.min.js","sources":["../src/videotime.js"],"sourcesContent":["/*\n * Video time player specific js\n *\n * @package    videotimeplugin_live\n * @module     videotimeplugin_live/videotime\n * @copyright  2022 bdecent gmbh <https://bdecent.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport VideoTimeBase from \"mod_videotime/videotime\";\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport PublishBase from \"block_deft/publish\";\nimport SubscribeBase from \"block_deft/subscribe\";\nimport Socket from \"videotimeplugin_live/socket\";\n\nvar rooms = {};\n\nclass Publish extends PublishBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.contextid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: this.ptype == 'publish',\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0].then(response => {\n            this.feed = response.id;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Publish current video feed\n     */\n    publishFeed() {\n        return Ajax.call([{\n            args: {\n                id: Number(this.feed),\n                room: this.roomid,\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_publish_feed'\n        }])[0];\n    }\n\n\n    /**\n     * Stop video feed\n     */\n    unpublish() {\n        return Ajax.call([{\n            args: {\n                id: Number(this.feed),\n                publish: false,\n                room: this.roomid\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_publish_feed'\n        }])[0];\n    }\n\n    handleClose() {\n        document.querySelectorAll(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"]'\n        ).forEach(button => {\n            button.classList.remove('hidden');\n        });\n\n        this.janus.destroy();\n\n        [\n            this.currentCamera || Promise.resolve(null),\n            this.currentDisplay || Promise.resolve(null),\n        ].forEach(videoInput => {\n            videoInput.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getVideoTracks().forEach(track => {\n                        track.enabled = false;\n                        track.stop();\n                    });\n                }\n\n                return null;\n            }).catch(Notification.exception);\n        });\n    }\n\n    onLocalTrack(track, on) {\n        const remoteStream = new MediaStream([track]);\n        if (!on || (track.kind == 'audio')) {\n            return;\n        }\n        remoteStream.mid = track.mid;\n        Log.debug(on);\n        Log.debug(remoteStream);\n        Janus.attachMediaStream(\n            document.getElementById('video-controls-' + this.tracks[track.id]),\n            remoteStream\n        );\n    }\n\n    handleClick(e) {\n        const button = e.target.closest(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"], [data-contextid=\"'\n            + this.contextid + '\"][data-action=\"mute\"], [data-contextid=\"'\n            + this.contextid + '\"][data-action=\"unmute\"], [data-contextid=\"'\n            + this.contextid + '\"][data-action=\"unpublish\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                type = button.getAttribute('data-type') || 'camera',\n                transceiver = this.getTransceiver('audio');\n            e.stopPropagation();\n            e.preventDefault();\n            document.querySelectorAll(\n                '[data-region=\"deft-venue\"] [data-action=\"publish\"], [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n            ).forEach(button => {\n                if ((button.getAttribute('data-action') != action) || (button.getAttribute('data-type') != type)) {\n                    button.classList.remove('hidden');\n                }\n            });\n            switch (action) {\n                case 'mute':\n                    if (transceiver) {\n                        transceiver.sender.track.enabled = false;\n                    }\n                    break;\n                case 'unmute':\n                    if (transceiver) {\n                        transceiver.sender.track.enabled = true;\n                    }\n                    break;\n                case 'publish':\n                    Log.debug(type);\n                    if (type == 'display') {\n                        this.shareDisplay();\n                    } else {\n                        this.shareCamera();\n                    }\n\n                    this.processStream([]);\n                    break;\n                case 'unpublish':\n                    this.unpublish();\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Set video source to user camera\n     */\n    shareCamera() {\n        const videoInput = this.videoInput,\n            currentCamera = this.currentCamera || Promise.resolve(null);\n\n        this.videoInput = currentCamera.then(videoStream => {\n            if (videoStream) {\n                return videoStream;\n            } else {\n                const cameraInput = navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: true\n                });\n\n                this.currentCamera = cameraInput.catch(() => {\n                    return currentCamera;\n                });\n\n                return cameraInput.then(videoStream => {\n                    this.tracks = this.tracks || {};\n                    videoStream.getTracks().forEach(track => {\n                        this.tracks[track.id] = 'camera';\n                    });\n\n                    return videoStream;\n                }).catch((e) => {\n                    Log.debug(e);\n\n                    return videoInput;\n                });\n            }\n        });\n    }\n\n    /**\n     * Set video source to display surface\n     */\n    shareDisplay() {\n        const videoInput = this.videoInput,\n            currentDisplay = this.currentDisplay || Promise.resolve(null),\n            displayInput = navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: true\n        });\n\n        this.videoInput = displayInput.then(videoStream => {\n            if (videoInput) {\n                videoInput.then(videoStream => {\n                    if (videoStream) {\n                        videoStream.getTracks().forEach(track => {\n                            Log.debug(track); //track.stop();\n                        });\n                    }\n                    return videoStream;\n                }).catch(Notification.exception);\n            }\n            this.tracks = this.tracks || {};\n            videoStream.getTracks().forEach(track => {\n                this.tracks[track.id] = 'display';\n            });\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return videoInput;\n        });\n\n        this.currentDisplay = displayInput.then(videoStream => {\n            currentDisplay.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        Log.debug('stop track');\n                        Log.debug(track);\n                        track.stop();\n                    });\n                }\n            });\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return currentDisplay;\n        });\n    }\n\n    processStream(tracks) {\n        this.videoInput.then(videoStream => {\n            this.tracks = this.tracks || {};\n            if (videoStream) {\n                const audiotransceiver = this.getTransceiver('audio'),\n                    videotransceiver = this.getTransceiver('video');\n                videoStream.getVideoTracks().forEach(track => {\n                    track.addEventListener('ended', () => {\n                        if (this.selectedTrack != track.id) {\n                            this.unpublish();\n                        }\n                    });\n                    this.selectedTrack = track;\n                    if (videotransceiver) {\n                        this.videoroom.replaceTracks({\n                            tracks: [{\n                                type: 'video',\n                                mid: videotransceiver.mid,\n                                capture: track\n                            }],\n                            error: Notification.exception\n                        });\n\n                        return;\n                    }\n                    tracks.push({\n                        type: 'video',\n                        capture: track,\n                        recv: false\n                    });\n                });\n                videoStream.getAudioTracks().forEach(track => {\n                    track.addEventListener('ended', () => {\n                        if (this.selectedTrack != track.id) {\n                            this.unpublish();\n                        }\n                    });\n                    if (document.querySelector('.hidden[data-action=\"mute\"][data-contextid=\"' + this.contextid + '\"]')) {\n                        track.enabled = false;\n                    }\n\n                    if (audiotransceiver) {\n                        this.videoroom.replaceTracks({\n                            tracks: [{\n                                type: 'audio',\n                                mid: audiotransceiver.mid,\n                                capture: track\n                            }],\n                            error: Notification.exception\n                        });\n\n                        return;\n                    }\n                    tracks.push({\n                        type: 'audio',\n                        capture: track,\n                        recv: false\n                    });\n                });\n                if (!tracks.length) {\n                    return videoStream;\n                }\n                this.videoroom.createOffer({\n                    tracks: tracks,\n                    success: (jsep) => {\n                        const publish = {\n                            request: \"configure\",\n                            video: true,\n                            audio: true\n                        };\n                        this.videoroom.send({\n                            message: publish,\n                            jsep: jsep\n                        });\n                    },\n                    error: function(error) {\n                        Notification.alert(\"WebRTC error... \", error.message);\n                    }\n                });\n            }\n\n            return videoStream;\n        }).catch(Notification.exception);\n    }\n}\n\nexport default class VideoTime extends VideoTimeBase {\n    initialize(contextid, token, peerid) {\n        Log.debug(\"Initializing Video Time \" + this.elementId);\n\n        this.contextid = contextid;\n        this.peerid = peerid;\n\n        Ajax.call([{\n            methodname: 'videotimeplugin_live_get_room',\n            args: {contextid: contextid},\n            done: (response) => {\n                const socket = new Socket(contextid, token);\n\n                this.iceservers = JSON.parse(response.iceservers);\n                this.roomid = response.roomid;\n                this.server = response.server;\n\n                rooms[String(contextid)] = {\n                    contextid: contextid,\n                    peerid: peerid,\n                    roomid: response.roomid,\n                    server: response.server,\n                    iceServers: JSON.parse(response.iceservers)\n                };\n                this.roomid = response.roomid;\n\n                document.querySelector('[data-contextid=\"' + this.contextid + '\"] .videotime-control').classList.remove('hidden');\n\n                socket.subscribe(() => {\n                    Ajax.call([{\n                        methodname: 'videotimeplugin_live_get_feed',\n                        args: {contextid: contextid},\n                        done: (response) => {\n                            const room = rooms[String(contextid)];\n                            if (room.publish && room.publish.restart) {\n                                if (response.feed == peerid) {\n                                    this.unpublish();\n                                }\n                                room.publish = null;\n                            }\n                            this.subscribeTo(Number(response.feed));\n                        },\n                        fail: Notification.exception\n                    }]);\n                });\n            },\n            fail: Notification.exception\n        }]);\n\n        this.addListeners();\n\n        return true;\n    }\n\n    /**\n     * Register player events to respond to user interaction and play progress.\n     */\n    addListeners() {\n        document.querySelector('body').removeEventListener('click', handleClick);\n        document.querySelector('body').addEventListener('click', handleClick);\n        return;\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     */\n    subscribeTo(source) {\n        Log.debug(source);\n        const room = rooms[String(this.contextid)];\n        document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"]').forEach(button => {\n            if (source == Number(this.peerid)) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"][data-action=\"unpublish\"]').forEach(button => {\n            if (source == Number(this.peerid)) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        Log.debug(source);\n\n        if (this.remoteFeed && !this.remoteFeed.creatingSubscription && !this.remoteFeed.restart) {\n            const update = {\n                request: 'update',\n                subscribe: [{\n                    feed: Number(source)\n                }],\n                unsubscribe: [{\n                    feed: Number(this.remoteFeed.current)\n                }]\n            };\n\n            if (!source && this.remoteFeed.current) {\n                delete update.subscribe;\n            } else if (source && !this.remoteFeed.current) {\n                delete update.unsubscribe;\n            }\n\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed.muteAudio = room.publish && (room.publish.feed === source);\n                this.remoteFeed.videoroom.send({message: update});\n                if (this.remoteFeed.audioTrack) {\n                    this.remoteFeed.audioTrack.enabled = !this.remoteFeed.muteAudio;\n                }\n\n                if (room.publish  && this.remoteFeed.current == room.publish.feed) {\n                    room.publish.handleClose();\n                    room.publish = null;\n                }\n                this.remoteFeed.current = source;\n                if (!source && this.remoteFeed) {\n                    this.remoteFeed.handleClose();\n                    this.remoteFeed = null;\n                }\n                Log.debug('[data-contextid=\"' + this.contextid + '\"] img.poster-img');\n                if (Number(source)) {\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                        img.classList.add('hidden');\n                    });\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(video => {\n                        video.classList.remove('hidden');\n                    });\n                } else {\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                        img.classList.remove('hidden');\n                    });\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(video => {\n                        video.classList.add('hidden');\n                    });\n                }\n            }\n        } else if (this.remoteFeed && this.remoteFeed.restart) {\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed = null;\n                this.subscribeTo(source);\n            }\n        } else if (this.remoteFeed) {\n            setTimeout(() => {\n                this.subscribeTo(source);\n            }, 500);\n        } else if (source) {\n            this.remoteFeed = new Subscribe(this.contextid, this.iceservers, this.roomid, this.server, this.peerid, source);\n            this.remoteFeed.remoteVideo = document.getElementById(this.elementId);\n            this.remoteFeed.remoteAudio = document.getElementById(this.elementId).parentNode.querySelector('audio');\n            this.remoteFeed.muteAudio = room.publish && (room.publish.feed === source);\n            this.remoteFeed.startConnection(source);\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                img.classList.add('hidden');\n            });\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                img.classList.remove('hidden');\n            });\n        }\n    }\n}\n\nconst handleClick = function(e) {\n    const button = e.target.closest(\n        '[data-roomid] [data-action=\"publish\"], [data-roomid] [data-action=\"unpublish\"],'\n        + '[data-roomid] [data-action=\"mute\"], [data-roomid] [data-action=\"unmute\"]'\n    );\n    if (button) {\n        const action = button.getAttribute('data-action'),\n            contextid = e.target.closest('[data-contextid]').getAttribute('data-contextid'),\n            room = rooms[String(contextid)],\n            iceServers = room.iceServers,\n            peerid = room.peerid,\n            roomid = room.roomid,\n            server = room.server,\n            type = button.getAttribute('data-type');\n        e.stopPropagation();\n        e.preventDefault();\n        if ((action == 'publish')  && (!room.publish || room.publish.restart)) {\n            room.publish = new Publish(contextid, iceServers, roomid, server, peerid);\n            if (type == 'display') {\n                room.publish.shareDisplay();\n            } else {\n                room.publish.shareCamera();\n            }\n            room.publish.startConnection();\n        } else {\n            if ((action == 'mute') || (action == 'unmute')) {\n                button.classList.add('hidden');\n                button.parentNode.querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(button => {\n                    if (button.getAttribute('data-action') != action) {\n                        button.classList.remove('hidden');\n                    }\n                });\n            }\n            if (room.publish) {\n                room.publish.handleClick(e);\n            }\n        }\n    }\n};\n\nclass Subscribe extends SubscribeBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.contextid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: false,\n                feed: this.feed,\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0];\n    }\n\n    attachAudio(audioStream) {\n        Janus.attachMediaStream(\n            this.remoteVideo.parentNode.querySelector('audio'),\n            audioStream\n        );\n        audioStream.getTracks().forEach(track => {\n            this.audioTrack = track;\n            track.enabled = !this.muteAudio;\n        });\n    }\n\n    attachVideo(videoStream) {\n        Janus.attachMediaStream(\n            this.remoteVideo,\n            videoStream\n        );\n    }\n}\n"],"names":["rooms","Publish","PublishBase","register","pluginHandle","Ajax","call","args","handle","getId","id","Number","this","contextid","plugin","room","roomid","ptype","session","getSessionId","fail","Notification","exception","methodname","then","response","feed","catch","publishFeed","unpublish","publish","handleClose","document","querySelectorAll","forEach","button","classList","remove","janus","destroy","currentCamera","Promise","resolve","currentDisplay","videoInput","videoStream","getVideoTracks","track","enabled","stop","onLocalTrack","on","remoteStream","MediaStream","kind","mid","debug","attachMediaStream","getElementById","tracks","handleClick","e","target","closest","action","getAttribute","type","transceiver","getTransceiver","stopPropagation","preventDefault","sender","shareDisplay","shareCamera","processStream","cameraInput","navigator","mediaDevices","getUserMedia","video","audio","getTracks","displayInput","getDisplayMedia","audiotransceiver","videotransceiver","addEventListener","selectedTrack","videoroom","replaceTracks","capture","error","push","recv","getAudioTracks","querySelector","length","createOffer","success","jsep","send","message","request","alert","VideoTime","VideoTimeBase","initialize","token","peerid","elementId","done","socket","Socket","iceservers","JSON","parse","server","String","iceServers","subscribe","restart","subscribeTo","addListeners","removeEventListener","source","remoteFeed","creatingSubscription","current","setTimeout","Subscribe","remoteVideo","remoteAudio","parentNode","muteAudio","startConnection","img","add","update","unsubscribe","audioTrack","SubscribeBase","attachAudio","audioStream","attachVideo"],"mappings":"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"}