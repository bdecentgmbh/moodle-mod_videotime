{"version":3,"file":"videotime.min.js","sources":["../src/videotime.js"],"sourcesContent":["/*\n * Video time player specific js\n *\n * @package    videotimeplugin_live\n * @module     videotimeplugin_live/videotime\n * @copyright  2022 bdecent gmbh <https://bdecent.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport VideoTimeBase from \"mod_videotime/videotime\";\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport PublishBase from \"block_deft/publish\";\nimport SubscribeBase from \"block_deft/subscribe\";\nimport Socket from \"videotimeplugin_live/socket\";\n\nvar rooms = {};\n\nclass Publish extends PublishBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: this.ptype == 'publish',\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0];\n    }\n\n    publishFeed() {\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n            setTimeout(() => {\n                this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                    const sender = transceiver.sender;\n                    if (\n                        sender.track\n                        && this.selectedTrack\n                        && (sender.track.id == this.selectedTrack.id)\n                    ) {\n                        const message = JSON.stringify({\n                            feed: Number(this.peerid),\n                            mid: transceiver.mid\n                        });\n                        this.videoroom.data({\n                            text: message,\n                            error: Log.debug\n                        });\n                    }\n                });\n                return Ajax.call([{\n                    args: {\n                        id: Number(this.peerid),\n                        room: this.roomid,\n                    },\n                    contextid: this.contextid,\n                    fail: Notification.exception,\n                    methodname: 'videotimeplugin_live_publish_feed'\n                }])[0];\n            });\n        }\n    }\n\n    unpublish() {\n        if (this.videoInput) {\n            this.videoInput.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getVideoTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n                this.videoInput = null;\n\n                return videoStream;\n            }).catch(Notification.exception);\n            this.videoroom.send({\n                message: {\n                    request: 'unpublish'\n                }\n            });\n        }\n        document.querySelectorAll(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"]'\n        ).forEach(button => {\n            button.classList.remove('hidden');\n        });\n        //document.querySelectorAll(\n            //'[data-contextid=\"' + this.contextid + '\"][data-action=\"unpublish\"]'\n        //).forEach(button => {\n            //button.classList.add('hidden');\n        //});\n    }\n\n    onLocalTrack(track, on) {\n        const remoteStream = new MediaStream([track]);\n        remoteStream.mid = track.mid;\n        Log.debug(on);\n        Log.debug(remoteStream);\n        Janus.attachMediaStream(\n            document.getElementById('video-controls-' + this.tracks[track.id]),\n            remoteStream\n        );\n        return;\n    }\n\n    handleClick(e) {\n        const button = e.target.closest(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"],  [data-contextid=\"'\n                + this.contextid + '\"][data-action=\"unpublish\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                type = button.getAttribute('data-type') || 'camera';\n            e.stopPropagation();\n            e.preventDefault();\n            document.querySelectorAll(\n                '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n            ).forEach(button => {\n                if ((button.getAttribute('data-action') != action) || (button.getAttribute('data-type') != type)) {\n                    button.classList.remove('hidden');\n                }\n            });\n            switch (action) {\n                case 'publish':\n                    Log.debug(type);\n                    if (type == 'display') {\n                        this.shareDisplay();\n                    } else {\n                        this.shareCamera();\n                    }\n\n                    this.videoInput.then(videoStream => {\n                        const tracks = [];\n                        if (videoStream) {\n                            videoStream.getVideoTracks().forEach(track => {\n                                tracks.push({\n                                    type: 'video',\n                                    capture: track,\n                                    recv: false\n                                });\n                                this.selectedTrack = track;\n                                this.tracks = this.tracks || {};\n                                this.tracks[track.id] = type;\n                            });\n                            videoStream.getAudioTracks().forEach(track => {\n                                tracks.push({\n                                    type: 'audio',\n                                    capture: track,\n                                    recv: false\n                                });\n                            });\n                            this.videoroom.createOffer({\n                                tracks: tracks,\n                                success: (jsep) => {\n                                    const publish = {\n                                        request: \"configure\",\n                                        video: true,\n                                        audio: true\n                                    };\n                                    this.videoroom.send({\n                                        message: publish,\n                                        jsep: jsep\n                                    });\n                                },\n                                error: function(error) {\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n                        }\n\n                        return videoStream;\n                    }).catch(Notification.exception);\n                    break;\n                case 'unpublish':\n                    if (this.videoInput) {\n                        this.videoInput.then(videoStream => {\n                            if (videoStream) {\n                                videoStream.getVideoTracks().forEach(track => {\n                                    track.stop();\n                                });\n                            }\n                            this.videoInput = null;\n\n                            return videoStream;\n                        }).catch(Notification.exception);\n                    }\n                    this.videoroom.send({\n                        message: {\n                            request: 'unpublish'\n                        }\n                    });\n                    return Ajax.call([{\n                        args: {\n                            id: Number(this.peerid),\n                            publish: false,\n                            room: this.roomid\n                        },\n                        contextid: this.contextid,\n                        fail: Notification.exception,\n                        methodname: 'videotimeplugin_publish_feed'\n                    }])[0];\n            }\n        }\n\n        return true;\n    }\n}\n\nexport default class VideoTime extends VideoTimeBase {\n    initialize(contextid, token, peerid) {\n        Log.debug(\"Initializing Video Time \" + this.elementId);\n\n        this.contextid = contextid;\n        this.peerid = peerid;\n\n        Ajax.call([{\n            methodname: 'videotimeplugin_live_get_room',\n            args: {contextid: contextid},\n            done: (response) => {\n                const socket = new Socket(contextid, token);\n\n                this.iceservers = JSON.parse(response.iceservers);\n                this.roomid = response.roomid;\n                this.server = response.server;\n\n                rooms[String(contextid)] = {\n                    contextid: contextid,\n                    peerid: peerid,\n                    roomid: response.roomid,\n                    server: response.server,\n                    iceServers: JSON.parse(response.iceservers)\n                };\n                this.roomid = response.roomid;\n\n                socket.subscribe(() => {\n                    Ajax.call([{\n                        methodname: 'videotimeplugin_live_get_feed',\n                        args: {contextid: contextid},\n                        done: (response) => {\n                            const room = rooms[String(contextid)];\n                            if (room.publish && room.publish.restart) {\n                                if (response.feed == peerid) {\n                                    this.unpublish();\n                                }\n                                room.publish = null;\n                            }\n                            this.subscribeTo(Number(response.feed));\n                        },\n                        fail: Notification.exception\n                    }]);\n                });\n            },\n            fail: Notification.exception\n        }]);\n\n        this.addListeners();\n\n        return true;\n    }\n\n    /**\n     * Register player events to respond to user interaction and play progress.\n     */\n    addListeners() {\n        document.querySelector('body').removeEventListener('click', handleClick);\n        document.querySelector('body').addEventListener('click', handleClick);\n        return;\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     */\n    subscribeTo(source) {\n        document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"]').forEach(button => {\n            if (source == Number(this.peerid)) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"][data-action=\"unpublish\"]').forEach(button => {\n            if (source == Number(this.peerid)) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        Log.debug(source);\n        Log.debug(this.peerid);\n\n        if (this.remoteFeed && !this.remoteFeed.creatingSubscription && !this.remoteFeed.restart) {\n            const update = {\n                request: 'update',\n                subscribe: [{\n                    feed: Number(source)\n                }],\n                unsubscribe: [{\n                    feed: Number(this.remoteFeed.current)\n                }]\n            };\n\n            if (!source && this.remoteFeed.current) {\n                delete update.subscribe;\n            } else if (source && !this.remoteFeed.current) {\n                delete update.unsubscribe;\n            }\n\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed.videoroom.send({message: update});\n                if (this.remoteFeed.current == this.peerid) {\n                    const room = rooms[String(this.contextid)];\n                    room.publish.unpublish();\n                }\n                this.remoteFeed.current = source;\n                Log.debug('[data-contextid=\"' + this.contextid + '\"] img.poster-img');\n                if (source) {\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                        img.classList.add('hidden');\n                    });\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                        img.classList.remove('hidden');\n                    });\n                } else {\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                        img.classList.remove('hidden');\n                    });\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                        img.classList.add('hidden');\n                    });\n                }\n            }\n        } else if (this.remoteFeed && this.remoteFeed.restart) {\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed = null;\n                this.subscribeTo(source);\n            }\n        } else if (this.remoteFeed) {\n            setTimeout(() => {\n                this.subscribeTo(source);\n            }, 500);\n        } else if (source) {\n            this.remoteFeed = new Subscribe(this.contextid, this.iceservers, this.roomid, this.server, this.peerid, source);\n            this.remoteFeed.remoteVideo = document.getElementById(this.elementId);\n            this.remoteFeed.remoteAudio = document.getElementById(this.elementId).parentNode.querySelector('audio');\n            this.remoteFeed.startConnection(source);\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                img.classList.add('hidden');\n            });\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                img.classList.remove('hidden');\n            });\n        }\n    }\n}\n\nconst handleClick = function(e) {\n    const button = e.target.closest('[data-roomid] [data-action=\"publish\"], [data-roomid] [data-action=\"unpublish\"]');\n    if (button) {\n        const action = button.getAttribute('data-action'),\n            contextid = e.target.closest('[data-contextid]').getAttribute('data-contextid'),\n            room = rooms[String(contextid)],\n            iceServers = room.iceServers,\n            peerid = room.peerid,\n            roomid = room.roomid,\n            server = room.server,\n            type = button.getAttribute('data-type');\n        e.stopPropagation();\n        e.preventDefault();\n        if (action == 'unpublish') {\n            Ajax.call([{\n                args: {\n                    id: Number(peerid),\n                    room: roomid,\n                    publish: false\n                },\n                contextid: contextid,\n                fail: Notification.exception,\n                methodname: 'videotimeplugin_live_publish_feed'\n            }]);\n        } else if (!room.publish || room.publish.restart) {\n            room.publish = new Publish(contextid, iceServers, roomid, server, peerid);\n            if (type == 'display') {\n                room.publish.shareDisplay();\n            } else {\n                room.publish.shareCamera();\n            }\n            room.publish.startConnection();\n        } else {\n            room.publish.handleClick(e);\n        }\n    }\n};\n\nclass Subscribe extends SubscribeBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: false,\n                feed: this.feed,\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0];\n    }\n}\n"],"names":["rooms","Publish","pluginHandle","Ajax","call","args","handle","getId","id","Number","this","peerid","plugin","room","roomid","ptype","session","getSessionId","contextid","fail","Notification","exception","methodname","videoroom","webrtcStuff","pc","iceConnectionState","setTimeout","_this","getTransceivers","forEach","transceiver","sender","track","selectedTrack","message","JSON","stringify","feed","mid","data","text","error","Log","debug","videoInput","then","videoStream","getVideoTracks","stop","_this2","catch","send","request","document","querySelectorAll","button","classList","remove","on","remoteStream","MediaStream","attachMediaStream","getElementById","tracks","e","target","closest","action","getAttribute","type","stopPropagation","preventDefault","shareDisplay","shareCamera","push","capture","recv","_this3","getAudioTracks","createOffer","success","jsep","video","audio","alert","publish","PublishBase","VideoTime","token","elementId","done","response","socket","Socket","_this4","iceservers","parse","server","String","iceServers","subscribe","restart","unpublish","subscribeTo","addListeners","querySelector","removeEventListener","handleClick","addEventListener","source","_this5","remoteFeed","creatingSubscription","current","Subscribe","remoteVideo","remoteAudio","parentNode","startConnection","img","add","update","unsubscribe","VideoTimeBase","SubscribeBase"],"mappings":"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"}