{"version":3,"file":"videotime.min.js","sources":["../src/videotime.js"],"sourcesContent":["/*\n * Video time player specific js\n *\n * @package    videotimeplugin_live\n * @module     videotimeplugin_live/videotime\n * @copyright  2022 bdecent gmbh <https://bdecent.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport Config from \"core/config\";\nimport VideoTimeBase from \"mod_videotime/videotime\";\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport PublishBase from \"block_deft/publish\";\nimport SubscribeBase from \"block_deft/subscribe\";\nimport Socket from \"videotimeplugin_live/socket\";\n\nvar rooms = {},\n    wstoken;\n\nclass Publish extends PublishBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    async register(pluginHandle) {\n        // Try a registration\n        try {\n            const response = await Ajax.call([{\n                args: {\n                    handle: pluginHandle.getId(),\n                    id: Number(this.contextid),\n                    plugin: pluginHandle.plugin,\n                    room: this.roomid,\n                    ptype: this.ptype == 'publish',\n                    session: pluginHandle.session.getSessionId()\n                },\n                contextid: this.contextid,\n                fail: Notification.exception,\n                methodname: 'videotimeplugin_live_join_room'\n            }])[0];\n            this.feed = response.id;\n\n            return response;\n        } catch (e) {\n            Notification.exception(e);\n        }\n\n        return null;\n    }\n\n    /**\n     * Publish current video feed\n     *\n     * @returns {Promise}\n     */\n    publishFeed() {\n        return Ajax.call([{\n            args: {\n                id: Number(this.feed),\n                room: this.roomid,\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_publish_feed'\n        }])[0];\n    }\n\n\n    /**\n     * Stop video feed\n     *\n     * @returns {Promise}\n     */\n    unpublish() {\n        document.querySelectorAll('#video-controls-camera, #video-controls-display').forEach(video => {\n            video.srcObject = null;\n            video.parentNode.classList.add('hidden');\n        });\n        return Ajax.call([{\n            args: {\n                id: Number(this.feed),\n                publish: false,\n                room: this.roomid\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_publish_feed'\n        }])[0];\n    }\n\n    handleClose() {\n        document.querySelectorAll(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"]'\n        ).forEach(button => {\n            button.classList.remove('hidden');\n        });\n\n        this.janus.destroy();\n\n        [\n            this.currentCamera || null,\n            this.currentDisplay || null,\n        ].forEach(async(videoInput) => {\n            if (!videoInput) {\n                return;\n            }\n            const videoStream = await videoInput;\n            if (videoStream) {\n                videoStream.getTracks().forEach(track => {\n                    track.enabled = false;\n                    track.stop();\n                });\n            }\n        });\n    }\n\n    async onLocalTrack(track, on) {\n        if (track.kind == 'audio') {\n            return;\n        }\n        if (on) {\n            const remoteStream = new MediaStream([track]);\n            remoteStream.mid = track.mid;\n\n            Janus.attachMediaStream(\n                document.getElementById('video-controls-' + this.tracks[track.id]),\n                remoteStream\n            );\n\n            return;\n        }\n        if (this.currentCamera) {\n            const videoStream = await this.currentCamera;\n            if (videoStream) {\n                videoStream.getTracks().forEach(current => {\n                    if (current.id == track.id) {\n                        this.currentCamera = null;\n                        document\n                            .getElementById('video-controls-' + this.tracks[track.id])\n                            .parentNode\n                            .classList\n                            .add('hidden');\n                    }\n                });\n            }\n        }\n        if (this.currentDisplay) {\n            const videoStream = await this.currentDisplay;\n            if (videoStream) {\n                videoStream.getTracks().forEach(current => {\n                    if (current.id == track.id) {\n                        this.currentDisplay = null;\n                        document\n                            .getElementById('video-controls-' + this.tracks[track.id])\n                            .parentNode\n                            .classList\n                            .add('hidden');\n                    }\n                });\n            }\n        }\n    }\n\n    handleClick(e) {\n        const button = e.target.closest(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"], [data-contextid=\"'\n            + this.contextid + '\"][data-action=\"close\"], [data-contextid=\"'\n            + this.contextid + '\"][data-action=\"mute\"], [data-contextid=\"'\n            + this.contextid + '\"][data-action=\"unmute\"], [data-contextid=\"'\n            + this.contextid + '\"][data-action=\"switch\"], [data-contextid=\"'\n            + this.contextid + '\"][data-action=\"unpublish\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                type = button.getAttribute('data-type') || 'camera';\n            e.stopPropagation();\n            e.preventDefault();\n            document.querySelectorAll(\n                '[data-region=\"deft-venue\"] [data-action=\"publish\"], [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n            ).forEach(button => {\n                if ((button.getAttribute('data-action') != action) || (button.getAttribute('data-type') != type)) {\n                    button.classList.remove('hidden');\n                }\n            });\n            switch (action) {\n                case 'close':\n                    document.getElementById('video-controls-' + type).srcObject = null;\n                    document.getElementById('video-controls-' + type).parentNode.classList.add('hidden');\n                    if (this.tracks[this.selectedTrack.id] == type) {\n                        this.unpublish();\n                    }\n                    break;\n                case 'mute':\n                case 'unmute':\n                    this.muteAudio(action == 'mute', type);\n                    break;\n                case 'publish':\n                    if (type == 'display') {\n                        this.videoInput = this.shareDisplay();\n                    } else {\n                        this.videoInput = this.shareCamera();\n                    }\n                    document.querySelectorAll('#video-controls-camera, #video-controls-display').forEach(video => {\n                        video.parentNode.classList.remove('selected');\n                    });\n                    document\n                        .getElementById('video-controls-' + type)\n                        .parentNode\n                        .classList\n                        .remove('hidden');\n                    document\n                        .getElementById('video-controls-' + type)\n                        .parentNode\n                        .classList\n                        .add('selected');\n\n                    this.processStream([]);\n                    break;\n                case 'switch':\n                    document.querySelectorAll('#video-controls-camera, #video-controls-display').forEach(video => {\n                        video.parentNode.classList.remove('selected');\n                    });\n                    if (type == 'display') {\n                        this.videoInput = this.currentDisplay;\n                    } else {\n                        this.videoInput = this.currentCamera;\n                    }\n                    document\n                        .getElementById('video-controls-' + type)\n                        .parentNode\n                        .classList\n                        .remove('hidden');\n                    document\n                        .getElementById('video-controls-' + type)\n                        .parentNode\n                        .classList\n                        .add('selected');\n                    this.processStream([]);\n                    break;\n                case 'unpublish':\n                    this.unpublish();\n            }\n        }\n\n        return true;\n    }\n\n    async muteAudio(mute, type) {\n        try {\n            const videoStream = await ((type == 'display') ? this.currentDisplay : this.currentCamera);\n            if (videoStream) {\n                videoStream.getAudioTracks().forEach(track => {\n                    track.enabled = (!mute);\n                });\n            }\n            return videoStream;\n        } catch (e) {\n            Notification.exception(e);\n        }\n\n        return null;\n    }\n\n    /**\n     * Set video source to user camera\n     */\n    async shareCamera() {\n        const videoInput = this.videoInput;\n        const currentCamera = this.currentCamera;\n\n        if (currentCamera) {\n            const videoStream = await currentCamera;\n            if (videoStream) {\n                return videoStream;\n            }\n        }\n\n        try {\n            this.currentCamera = navigator.mediaDevices.getUserMedia({\n                video: true,\n                audio: true\n            });\n            const videoStream = await this.currentCamera;\n            this.tracks = this.tracks || {};\n            videoStream.getTracks().forEach(track => {\n                this.tracks[track.id] = 'camera';\n            });\n            return videoStream;\n        } catch (e) {\n            Log.debug(e);\n        }\n\n        return videoInput;\n    }\n\n    /**\n     * Set video source to display surface\n     */\n    async shareDisplay() {\n        const videoInput = this.videoInput,\n            currentDisplay = this.currentDisplay || null,\n            displayInput = navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: true\n        });\n\n        this.videoInput = displayInput;\n        try {\n            const videoStream = await displayInput;\n            this.tracks = this.tracks || {};\n            videoStream.getTracks().forEach(track => {\n                this.tracks[track.id] = 'display';\n            });\n\n            this.currentDisplay = displayInput;\n            if (currentDisplay) {\n                const videoStream = await currentDisplay;\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n            }\n\n            return videoStream;\n        } catch (e) {\n            Log.debug(e);\n\n            return videoInput;\n        }\n    }\n\n    /**\n     * Process tracks from current video stream and adjust publicatioin\n     *\n     * @param {array} tracks Additional tracks to add\n     * @returns {bool}\n     */\n    async processStream(tracks) {\n        try {\n            const videoStream = await this.videoInput;\n            this.tracks = this.tracks || {};\n            if (videoStream) {\n                const audiotransceiver = this.getTransceiver('audio'),\n                    videotransceiver = this.getTransceiver('video');\n                videoStream.getVideoTracks().forEach(track => {\n                    track.addEventListener('ended', () => {\n                        if (this.selectedTrack.id == track.id) {\n                            this.unpublish();\n                        } else {\n                            document\n                                .getElementById('video-controls-' + this.tracks[track.id])\n                                .parentNode\n                                .classList\n                                .add('hidden');\n                        }\n                    });\n                    this.selectedTrack = track;\n                    if (videotransceiver) {\n                        this.videoroom.replaceTracks({\n                            tracks: [{\n                                type: 'video',\n                                mid: videotransceiver.mid,\n                                capture: track\n                            }],\n                            error: Notification.exception\n                        });\n\n                        return;\n                    }\n                    tracks.push({\n                        type: 'video',\n                        capture: track,\n                        recv: false\n                    });\n                });\n                videoStream.getAudioTracks().forEach(track => {\n                    if (\n                        document.querySelector('.hidden[data-action=\"mute\"][data-contextid=\"' + this.contextid + '\"][data-type=\"'\n                        + this.tracks[this.selectedTrack.id] + '\"]'\n                    )) {\n                        track.enabled = false;\n                    }\n\n                    if (audiotransceiver) {\n                        this.videoroom.replaceTracks({\n                            tracks: [{\n                                type: 'audio',\n                                mid: audiotransceiver.mid,\n                                capture: track\n                            }],\n                            error: Notification.exception\n                        });\n\n                        return;\n                    }\n                    tracks.push({\n                        type: 'audio',\n                        capture: track,\n                        recv: false\n                    });\n                });\n                if (!tracks.length) {\n                    return videoStream;\n                }\n                this.videoroom.createOffer({\n                    tracks: tracks,\n                    success: (jsep) => {\n                        const publish = {\n                            request: \"configure\",\n                            video: true,\n                            audio: true\n                        };\n                        this.videoroom.send({\n                            message: publish,\n                            jsep: jsep\n                        });\n                    },\n                    error: function(error) {\n                        Notification.alert(\"WebRTC error... \", error.message);\n                    }\n                });\n            }\n        } catch (e) {\n            Notification.exception(e);\n        }\n\n        return true;\n    }\n}\n\nexport default class VideoTime extends VideoTimeBase {\n    /**\n     * Initialize player plugin\n     *\n     * @param {int} contextid\n     * @param {string} token Deft token\n     * @param {int} peerid Peer id for audio room participant\n     *\n     * @returns {bool}\n     */\n    async initialize(contextid, token, peerid) {\n        Log.debug(\"Initializing Video Time \" + this.elementId);\n\n        this.contextid = contextid;\n        this.plugins = [];\n        this.peerid = peerid;\n\n        if (this.instance.token) {\n            wstoken = this.instance.token;\n        }\n\n        try {\n            const response = await this.getRoom();\n            const socket = new Socket(contextid, token);\n\n            this.iceservers = JSON.parse(response.iceservers);\n            this.roomid = response.roomid;\n            this.server = response.server;\n\n            rooms[String(contextid)] = {\n                contextid: contextid,\n                peerid: peerid,\n                roomid: response.roomid,\n                server: response.server,\n                iceServers: JSON.parse(response.iceservers)\n            };\n            this.roomid = response.roomid;\n\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] .videotime-control').forEach(control => {\n                control.classList.remove('hidden');\n            });\n\n            socket.subscribe(async() => {\n                try {\n                    const response = await this.getFeed();\n                    const room = rooms[String(contextid)];\n                    if (room.publish && room.publish.restart) {\n                        if (response.feed == peerid) {\n                            this.unpublish();\n                        }\n                        room.publish = null;\n                    }\n                    this.subscribeTo(Number(response.feed));\n                } catch (e) {\n                    Notification.exception(e);\n                }\n            });\n        } catch (e) {\n            Notification.exception(e);\n        }\n\n        this.addListeners();\n\n        return true;\n    }\n\n    /**\n     * Fetch room info\n     *\n     * @returns {Promise}\n     */\n    async getRoom() {\n        if (wstoken) {\n            const url = new URL(Config.wwwroot + '/webservice/rest/server.php'),\n                data = url.searchParams;\n            data.set('wstoken', wstoken);\n            data.set('moodlewsrestformat', 'json');\n            data.set('wsfunction', 'videotimeplugin_live_get_room');\n            data.set('contextid', this.contextid);\n\n            try {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    Notification.exeption('Web service error');\n                }\n                return await response.json();\n            } catch (e) {\n                Notification.exception(e);\n            }\n        }\n\n        return await Ajax.call([{\n            methodname: 'videotimeplugin_live_get_room',\n            args: {contextid: this.contextid},\n            fail: Notification.exception\n        }])[0];\n    }\n\n    /**\n     * Fetch current feed\n     *\n     * @returns {Promise}\n     */\n    async getFeed() {\n        if (wstoken) {\n            const url = new URL(Config.wwwroot + '/webservice/rest/server.php'),\n                data = url.searchParams;\n            data.set('wstoken', wstoken);\n            data.set('moodlewsrestformat', 'json');\n            data.set('wsfunction', 'videotimeplugin_live_get_feed');\n            data.set('contextid', this.contextid);\n\n            try {\n                const response = fetch(url);\n                if (!response.ok) {\n                    Notification.exeption('Web service error');\n                }\n                return await response.json();\n            } catch (e) {\n                Notification.exception(e);\n            }\n        }\n\n        return await Ajax.call([{\n            methodname: 'videotimeplugin_live_get_feed',\n            args: {contextid: this.contextid},\n            fail: Notification.exception\n        }])[0];\n    }\n\n    /**\n     * Get video element\n     *\n     * @returns {HTMLMediaElement}\n     */\n    getPlayer() {\n        const player = document.getElementById(this.elementId);\n\n        return player;\n    }\n\n    /**\n     * Register player events to respond to user interaction and play progress.\n     */\n    addListeners() {\n        const player = this.getPlayer();\n\n        document.querySelector('body').removeEventListener('click', handleClick);\n        document.querySelector('body').addEventListener('click', handleClick);\n\n        if (!player) {\n            Log.debug('Player was not properly initialized for course module ' + this.cmId);\n            return;\n        }\n\n        // Fire view event in Moodle on first play only.\n        player.addEventListener('play', () => {\n            if (this.hasPro) {\n                this.startWatchInterval();\n            }\n            this.view();\n            return true;\n        });\n\n        // Features beyond this point are for pro only.\n        if (!this.hasPro) {\n            return;\n        }\n\n        // Note: Vimeo player does not support multiple events in a single on() call. Each requires it's own function.\n\n        // Catch all events where video plays.\n        player.addEventListener('play', function() {\n            this.playing = true;\n            Log.debug('VIDEO_TIME play');\n        }.bind(this));\n        player.addEventListener('playing', function() {\n            this.playing = true;\n            Log.debug('VIDEO_TIME playing');\n        }.bind(this));\n\n        // Catch all events where video stops.\n        player.addEventListener('pause', function() {\n            this.playing = false;\n            Log.debug('VIDEO_TIME pause');\n        }.bind(this));\n        player.addEventListener('stalled', function() {\n            this.playing = false;\n            Log.debug('VIDEO_TIME stalled');\n        }.bind(this));\n        player.addEventListener('suspend', function() {\n            this.playing = false;\n            Log.debug('VIDEO_TIME suspend');\n        }.bind(this));\n        player.addEventListener('abort', function() {\n            this.playing = false;\n            Log.debug('VIDEO_TIME abort');\n        }.bind(this));\n\n        // Initiate video finish procedure.\n        player.addEventListener('ended', this.handleEnd.bind(this));\n        player.addEventListener('pause', this.handlePause.bind(this));\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     */\n    subscribeTo(source) {\n        const room = rooms[String(this.contextid)];\n        document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"]').forEach(button => {\n            if (source == Number(this.peerid)) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"][data-action=\"unpublish\"]').forEach(button => {\n            if (source == Number(this.peerid)) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n\n        if (this.remoteFeed && !this.remoteFeed.creatingSubscription && !this.remoteFeed.restart) {\n            this.updateSubscription(source);\n        } else if (this.remoteFeed && this.remoteFeed.restart) {\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed = null;\n                this.subscribeTo(source);\n            }\n        } else if (this.remoteFeed) {\n            setTimeout(() => {\n                this.subscribeTo(source);\n            }, 500);\n        } else if (source) {\n            this.remoteFeed = new Subscribe(this.contextid, this.iceservers, this.roomid, this.server, this.peerid);\n            this.remoteFeed.remoteVideo = document.getElementById(this.elementId);\n            this.remoteFeed.remoteAudio = document.getElementById(this.elementId).parentNode.querySelector('audio');\n            this.remoteFeed.muteAudio = room.publish && (room.publish.feed === source);\n            this.remoteFeed.startConnection(source);\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                img.classList.add('hidden');\n            });\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                img.classList.remove('hidden');\n            });\n        }\n    }\n\n    updateSubscription(source) {\n        const room = rooms[String(this.contextid)];\n        const update = {\n            request: 'update',\n            subscribe: [{\n                feed: Number(source)\n            }],\n            unsubscribe: [{\n                feed: Number(this.remoteFeed.current)\n            }]\n        };\n\n        if (!source && this.remoteFeed.current) {\n            delete update.subscribe;\n        } else if (source && !this.remoteFeed.current) {\n            delete update.unsubscribe;\n        }\n\n        if (this.remoteFeed.current != source) {\n            this.remoteFeed.muteAudio = room.publish && (room.publish.feed === source);\n            this.remoteFeed.videoroom.send({message: update});\n            if (this.remoteFeed.audioTrack) {\n                this.remoteFeed.audioTrack.enabled = !this.remoteFeed.muteAudio;\n            }\n\n            if (room.publish && this.remoteFeed.current == room.publish.feed) {\n                room.publish.handleClose();\n                room.publish = null;\n            }\n            this.remoteFeed.current = source;\n            if (!source && this.remoteFeed) {\n                this.remoteFeed.handleClose();\n                this.remoteFeed = null;\n            }\n            if (Number(source)) {\n                document.querySelectorAll(\n                    '[data-contextid=\"' + this.contextid + '\"] .videotime-embed img.poster-img'\n                ).forEach(img => {\n                    img.classList.add('hidden');\n                });\n                document.querySelectorAll(\n                    '[data-contextid=\"' + this.contextid + '\"] .videotime-embed video'\n                ).forEach(video => {\n                    video.classList.remove('hidden');\n                });\n            } else {\n                document.querySelectorAll(\n                    '[data-contextid=\"' + this.contextid + '\"] .videotime-embed img.poster-img'\n                ).forEach(img => {\n                    img.classList.remove('hidden');\n                });\n                document.querySelectorAll(\n                    '[data-contextid=\"' + this.contextid + '\"] .videotime-embed video'\n                ).forEach(video => {\n                    video.srcObject = null;\n                    video.classList.add('hidden');\n                });\n            }\n        }\n    }\n\n    /**\n     * Get duration of video\n     *\n     * @returns {float}\n     */\n    getDuration() {\n        return 0;\n    }\n\n    /**\n     * Get duration of video\n     *\n     * @returns {float}\n     */\n    getPlaybackRate() {\n        return 1;\n    }\n\n    /**\n     * Get pause state\n     *\n     * @return {bool}\n     */\n    getPaused() {\n        return true;\n    }\n\n    /**\n     * Record watch time for session.\n     */\n    recordWatchTime() {\n        return;\n    }\n\n    /**\n     * Set state on session.\n     */\n    setSessionState() {\n        return;\n    }\n\n    /**\n     * Set current watch time for video. Used for resuming.\n     */\n    setCurrentTime() {\n        return;\n    }\n\n    /**\n     * Set video watch percentage for session.\n     */\n    setPercent() {\n        return;\n    }\n}\n\nconst handleClick = function(e) {\n    const button = e.target.closest(\n        '[data-roomid] [data-action=\"publish\"], [data-roomid] [data-action=\"unpublish\"],'\n        + '[data-roomid] [data-action=\"close\"], '\n        + '[data-roomid] [data-action=\"switch\"], '\n        + '[data-roomid] [data-action=\"mute\"], [data-roomid] [data-action=\"unmute\"]'\n    );\n    if (button) {\n        const action = button.getAttribute('data-action'),\n            contextid = e.target.closest('[data-contextid]').getAttribute('data-contextid'),\n            room = rooms[String(contextid)],\n            iceServers = room.iceServers,\n            peerid = room.peerid,\n            roomid = room.roomid,\n            server = room.server,\n            type = button.getAttribute('data-type');\n        e.stopPropagation();\n        e.preventDefault();\n        if ((action == 'publish') && (!room.publish || room.publish.restart)) {\n            room.publish = new Publish(contextid, iceServers, roomid, server, peerid);\n            if (type == 'display') {\n                room.publish.videoInput = room.publish.shareDisplay();\n            } else {\n                room.publish.videoInput = room.publish.shareCamera();\n            }\n            room.publish.startConnection();\n            document\n                .getElementById('video-controls-' + (type || 'camera'))\n                .parentNode\n                .classList\n                .remove('hidden');\n            document\n                .getElementById('video-controls-' + (type || 'camera'))\n                .parentNode\n                .classList\n                .add('selected');\n        } else {\n            if ((action == 'mute') || (action == 'unmute')) {\n                button.classList.add('hidden');\n                button.parentNode.querySelectorAll('[data-action=\"mute\"], [data-action=\"unmute\"]').forEach(button => {\n                    if (button.getAttribute('data-action') != action) {\n                        button.classList.remove('hidden');\n                    }\n                });\n            }\n            if (room.publish) {\n                room.publish.handleClick(e);\n            }\n        }\n    }\n};\n\nclass Subscribe extends SubscribeBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    async register(pluginHandle) {\n        // Try a registration\n        if (wstoken) {\n            const url = new URL(Config.wwwroot + '/webservice/rest/server.php'),\n                data = url.searchParams;\n            data.set('wstoken', wstoken);\n            data.set('moodlewsrestformat', 'json');\n            data.set('wsfunction', 'videotimeplugin_live_join_room');\n            data.set('handle', pluginHandle.getId());\n            data.set('id', Number(this.contextid));\n            data.set('plugin', pluginHandle.plugin);\n            data.set('room', this.roomid);\n            data.set('feed', this.feed);\n            data.set('session', pluginHandle.session.getSessionId());\n            try {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    Notification.exeption('Web service error');\n                }\n                return await response.json();\n            } catch (e) {\n                Notification.exception(e);\n            }\n        }\n\n        return await Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.contextid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: false,\n                feed: this.feed,\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0];\n    }\n\n    /**\n     * Attach audio stream to media element\n     *\n     * @param {HTMLMediaElement} audioStream Stream to attach\n     */\n    attachAudio(audioStream) {\n        Janus.attachMediaStream(\n            this.remoteVideo.parentNode.querySelector('audio'),\n            audioStream\n        );\n        audioStream.getTracks().forEach(track => {\n            this.audioTrack = track;\n            track.enabled = !this.muteAudio;\n        });\n    }\n\n    /**\n     * Attach video stream to media element\n     *\n     * @param {HTMLMediaElement} videoStream Stream to attach\n     */\n    attachVideo(videoStream) {\n        Janus.attachMediaStream(\n            this.remoteVideo,\n            videoStream\n        );\n    }\n}\n"],"names":["wstoken","rooms","Publish","PublishBase","pluginHandle","response","Ajax","call","args","handle","getId","id","Number","this","contextid","plugin","room","roomid","ptype","session","getSessionId","fail","Notification","exception","methodname","feed","e","publishFeed","unpublish","document","querySelectorAll","forEach","video","srcObject","parentNode","classList","add","publish","handleClose","button","remove","janus","destroy","currentCamera","currentDisplay","async","videoInput","videoStream","getTracks","track","enabled","stop","on","kind","remoteStream","MediaStream","mid","attachMediaStream","getElementById","tracks","current","handleClick","target","closest","action","getAttribute","type","stopPropagation","preventDefault","selectedTrack","muteAudio","shareDisplay","shareCamera","processStream","mute","getAudioTracks","navigator","mediaDevices","getUserMedia","audio","debug","displayInput","getDisplayMedia","audiotransceiver","getTransceiver","videotransceiver","getVideoTracks","addEventListener","videoroom","replaceTracks","capture","error","push","recv","querySelector","length","createOffer","success","jsep","send","message","request","alert","VideoTime","VideoTimeBase","token","peerid","elementId","plugins","instance","getRoom","socket","Socket","iceservers","JSON","parse","server","String","iceServers","control","subscribe","getFeed","restart","subscribeTo","addListeners","url","URL","Config","wwwroot","data","searchParams","set","fetch","ok","exeption","json","getPlayer","player","removeEventListener","hasPro","startWatchInterval","view","playing","bind","handleEnd","handlePause","cmId","source","remoteFeed","creatingSubscription","setTimeout","Subscribe","remoteVideo","remoteAudio","startConnection","img","updateSubscription","update","unsubscribe","audioTrack","getDuration","getPlaybackRate","getPaused","recordWatchTime","setSessionState","setCurrentTime","setPercent","SubscribeBase","attachAudio","audioStream","attachVideo"],"mappings":"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"}