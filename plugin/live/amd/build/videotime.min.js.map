{"version":3,"file":"videotime.min.js","sources":["../src/videotime.js"],"sourcesContent":["/*\n * Video time player specific js\n *\n * @package    videotimeplugin_live\n * @module     videotimeplugin_live/videotime\n * @copyright  2022 bdecent gmbh <https://bdecent.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport VideoTimeBase from \"mod_videotime/videotime\";\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport PublishBase from \"block_deft/publish\";\nimport SubscribeBase from \"block_deft/subscribe\";\nimport Socket from \"videotimeplugin_live/socket\";\n\nvar rooms = {};\n\nclass Publish extends PublishBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.contextid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: this.ptype == 'publish',\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0].then(response => {\n            this.feed = response.id;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Publish current video feed\n     */\n    publishFeed() {\n        return Ajax.call([{\n            args: {\n                id: Number(this.feed),\n                room: this.roomid,\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_publish_feed'\n        }])[0];\n    }\n\n\n    /**\n     * Stop video feed\n     */\n    unpublish() {\n        return Ajax.call([{\n            args: {\n                id: Number(this.feed),\n                publish: false,\n                room: this.roomid\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_publish_feed'\n        }])[0];\n    }\n\n    handleClose() {\n        document.querySelectorAll(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"]'\n        ).forEach(button => {\n            button.classList.remove('hidden');\n        });\n\n        this.janus.destroy();\n\n        [\n            this.currentCamera || Promise.resolve(null),\n            this.currentDisplay || Promise.resolve(null),\n        ].forEach(videoInput => {\n            videoInput.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getVideoTracks().forEach(track => {\n                        track.enabled = false;\n                        track.stop();\n                    });\n                }\n\n                return null;\n            }).catch(Notification.exception);\n        });\n    }\n\n    onLocalTrack(track, on) {\n        const remoteStream = new MediaStream([track]);\n        if (!on) {\n            return;\n        }\n        remoteStream.mid = track.mid;\n        Log.debug(on);\n        Log.debug(remoteStream);\n        Janus.attachMediaStream(\n            document.getElementById('video-controls-' + this.tracks[track.id]),\n            remoteStream\n        );\n    }\n\n    handleClick(e) {\n        const button = e.target.closest(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"],  [data-contextid=\"'\n                + this.contextid + '\"][data-action=\"unpublish\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                type = button.getAttribute('data-type') || 'camera';\n            e.stopPropagation();\n            e.preventDefault();\n            document.querySelectorAll(\n                '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n            ).forEach(button => {\n                if ((button.getAttribute('data-action') != action) || (button.getAttribute('data-type') != type)) {\n                    button.classList.remove('hidden');\n                }\n            });\n            switch (action) {\n                case 'publish':\n                    Log.debug(type);\n                    if (type == 'display') {\n                        this.shareDisplay();\n                    } else {\n                        this.shareCamera();\n                    }\n\n                    this.videoInput.then(videoStream => {\n                        const tracks = [];\n                        this.tracks = this.tracks || {};\n                        if (videoStream) {\n                            const transceiver = this.getTransceiver();\n                            videoStream.getVideoTracks().forEach(track => {\n                                track.addEventListener('ended', () => {\n                                    if (this.selectedTrack != track.id) {\n                                        this.unpublish();\n                                    }\n                                });\n                                if (transceiver) {\n                                    this.videoroom.replaceTracks({\n                                        tracks: [{\n                                            type: 'video',\n                                            mid: transceiver.mid,\n                                            capture: track\n                                        }],\n                                        error: Notification.exception\n                                    });\n\n                                    this.selectedTrack = track;\n                                    return;\n                                }\n                                tracks.push({\n                                    type: 'video',\n                                    capture: track,\n                                    recv: false\n                                });\n                                this.selectedTrack = track;\n                            });\n                            if (!tracks.length) {\n                                return videoStream;\n                            }\n                            videoStream.getAudioTracks().forEach(track => {\n                                tracks.push({\n                                    type: 'audio',\n                                    capture: track,\n                                    recv: false\n                                });\n                            });\n                            if (!tracks.length) {\n                                return videoStream;\n                            }\n                            this.videoroom.createOffer({\n                                tracks: tracks,\n                                success: (jsep) => {\n                                    const publish = {\n                                        request: \"configure\",\n                                        video: true,\n                                        audio: true\n                                    };\n                                    this.videoroom.send({\n                                        message: publish,\n                                        jsep: jsep\n                                    });\n                                },\n                                error: function(error) {\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n                        }\n\n                        return videoStream;\n                    }).catch(Notification.exception);\n                    break;\n                case 'unpublish':\n                    this.unpublish();\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Set video source to user camera\n     */\n    shareCamera() {\n        const videoInput = this.videoInput,\n            currentCamera = this.currentCamera || Promise.resolve(null);\n\n        this.videoInput = currentCamera.then(videoStream => {\n            if (videoStream) {\n                return videoStream;\n            } else {\n                const cameraInput = navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: false\n                });\n\n                this.currentCamera = cameraInput.catch(() => {\n                    return currentCamera;\n                });\n\n                return cameraInput.then(videoStream => {\n                    this.tracks = this.tracks || {};\n                    videoStream.getTracks().forEach(track => {\n                        this.tracks[track.id] = 'camera';\n                    });\n\n                    return videoStream;\n                }).catch((e) => {\n                    Log.debug(e);\n\n                    return videoInput;\n                });\n            }\n        });\n    }\n\n    /**\n     * Set video source to display surface\n     */\n    shareDisplay() {\n        const videoInput = this.videoInput,\n            currentDisplay = this.currentDisplay || Promise.resolve(null),\n            displayInput = navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: false\n        });\n\n        this.videoInput = displayInput.then(videoStream => {\n            if (videoInput) {\n                videoInput.then(videoStream => {\n                    if (videoStream) {\n                        videoStream.getTracks().forEach(track => {\n                            Log.debug(track); //track.stop();\n                        });\n                    }\n                    return videoStream;\n                }).catch(Notification.exception);\n            }\n            this.tracks = this.tracks || {};\n            videoStream.getTracks().forEach(track => {\n                this.tracks[track.id] = 'display';\n            });\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return videoInput;\n        });\n\n        this.currentDisplay = displayInput.then(videoStream => {\n            currentDisplay.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        Log.debug('stop track');\n                        Log.debug(track);\n                        track.stop();\n                    });\n                }\n            });\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return currentDisplay;\n        });\n    }\n}\n\nexport default class VideoTime extends VideoTimeBase {\n    initialize(contextid, token, peerid) {\n        Log.debug(\"Initializing Video Time \" + this.elementId);\n\n        this.contextid = contextid;\n        this.peerid = peerid;\n\n        Ajax.call([{\n            methodname: 'videotimeplugin_live_get_room',\n            args: {contextid: contextid},\n            done: (response) => {\n                const socket = new Socket(contextid, token);\n\n                this.iceservers = JSON.parse(response.iceservers);\n                this.roomid = response.roomid;\n                this.server = response.server;\n\n                rooms[String(contextid)] = {\n                    contextid: contextid,\n                    peerid: peerid,\n                    roomid: response.roomid,\n                    server: response.server,\n                    iceServers: JSON.parse(response.iceservers)\n                };\n                this.roomid = response.roomid;\n\n                socket.subscribe(() => {\n                    Ajax.call([{\n                        methodname: 'videotimeplugin_live_get_feed',\n                        args: {contextid: contextid},\n                        done: (response) => {\n                            const room = rooms[String(contextid)];\n                            if (room.publish && room.publish.restart) {\n                                if (response.feed == peerid) {\n                                    this.unpublish();\n                                }\n                                room.publish = null;\n                            }\n                            this.subscribeTo(Number(response.feed));\n                        },\n                        fail: Notification.exception\n                    }]);\n                });\n            },\n            fail: Notification.exception\n        }]);\n\n        this.addListeners();\n\n        return true;\n    }\n\n    /**\n     * Register player events to respond to user interaction and play progress.\n     */\n    addListeners() {\n        document.querySelector('body').removeEventListener('click', handleClick);\n        document.querySelector('body').addEventListener('click', handleClick);\n        return;\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     */\n    subscribeTo(source) {\n        document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"]').forEach(button => {\n            if (source == Number(this.peerid)) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"][data-action=\"unpublish\"]').forEach(button => {\n            if (source == Number(this.peerid)) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        Log.debug(source);\n\n        if (this.remoteFeed && !this.remoteFeed.creatingSubscription && !this.remoteFeed.restart) {\n            const update = {\n                request: 'update',\n                subscribe: [{\n                    feed: Number(source)\n                }],\n                unsubscribe: [{\n                    feed: Number(this.remoteFeed.current)\n                }]\n            };\n\n            if (!source && this.remoteFeed.current) {\n                delete update.subscribe;\n            } else if (source && !this.remoteFeed.current) {\n                delete update.unsubscribe;\n            }\n\n            if (this.remoteFeed.current != source) {\n                const room = rooms[String(this.contextid)];\n                this.remoteFeed.videoroom.send({message: update});\n                if (room.publish  && this.remoteFeed.current == room.publish.feed) {\n                    room.publish.handleClose();\n                    room.publish = null;\n                }\n                this.remoteFeed.current = source;\n                if (!source && this.remoteFeed.current) {\n                    this.remoteFeed.handleClose();\n                    this.remoteFeed = null;\n                }\n                Log.debug('[data-contextid=\"' + this.contextid + '\"] img.poster-img');\n                if (Number(source)) {\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                        img.classList.add('hidden');\n                    });\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(video => {\n                        video.classList.remove('hidden');\n                    });\n                } else {\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                        img.classList.remove('hidden');\n                    });\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(video => {\n                        video.classList.add('hidden');\n                    });\n                }\n            }\n        } else if (this.remoteFeed && this.remoteFeed.restart) {\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed = null;\n                this.subscribeTo(source);\n            }\n        } else if (this.remoteFeed) {\n            setTimeout(() => {\n                this.subscribeTo(source);\n            }, 500);\n        } else if (source) {\n            this.remoteFeed = new Subscribe(this.contextid, this.iceservers, this.roomid, this.server, this.peerid, source);\n            this.remoteFeed.remoteVideo = document.getElementById(this.elementId);\n            this.remoteFeed.remoteAudio = document.getElementById(this.elementId).parentNode.querySelector('audio');\n            this.remoteFeed.startConnection(source);\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                img.classList.add('hidden');\n            });\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                img.classList.remove('hidden');\n            });\n        }\n    }\n}\n\nconst handleClick = function(e) {\n    const button = e.target.closest('[data-roomid] [data-action=\"publish\"], [data-roomid] [data-action=\"unpublish\"]');\n    if (button) {\n        const action = button.getAttribute('data-action'),\n            contextid = e.target.closest('[data-contextid]').getAttribute('data-contextid'),\n            room = rooms[String(contextid)],\n            iceServers = room.iceServers,\n            peerid = room.peerid,\n            roomid = room.roomid,\n            server = room.server,\n            type = button.getAttribute('data-type');\n        e.stopPropagation();\n        e.preventDefault();\n        if ((action == 'publish')  && (!room.publish || room.publish.restart)) {\n            room.publish = new Publish(contextid, iceServers, roomid, server, peerid);\n            if (type == 'display') {\n                room.publish.shareDisplay();\n            } else {\n                room.publish.shareCamera();\n            }\n            room.publish.startConnection();\n        } else {\n            room.publish.handleClick(e);\n        }\n    }\n};\n\nclass Subscribe extends SubscribeBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.contextid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: false,\n                feed: this.feed,\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0];\n    }\n}\n"],"names":["rooms","Publish","PublishBase","register","pluginHandle","Ajax","call","args","handle","getId","id","Number","this","contextid","plugin","room","roomid","ptype","session","getSessionId","fail","Notification","exception","methodname","then","response","feed","catch","publishFeed","unpublish","publish","handleClose","document","querySelectorAll","forEach","button","classList","remove","janus","destroy","currentCamera","Promise","resolve","currentDisplay","videoInput","videoStream","getVideoTracks","track","enabled","stop","onLocalTrack","on","remoteStream","MediaStream","mid","debug","attachMediaStream","getElementById","tracks","handleClick","e","target","closest","action","getAttribute","type","stopPropagation","preventDefault","shareDisplay","shareCamera","transceiver","getTransceiver","addEventListener","selectedTrack","videoroom","replaceTracks","capture","error","push","recv","length","getAudioTracks","createOffer","success","jsep","send","message","request","video","audio","alert","cameraInput","navigator","mediaDevices","getUserMedia","getTracks","displayInput","getDisplayMedia","VideoTime","VideoTimeBase","initialize","token","peerid","elementId","done","socket","Socket","iceservers","JSON","parse","server","String","iceServers","subscribe","restart","subscribeTo","addListeners","querySelector","removeEventListener","source","remoteFeed","creatingSubscription","current","setTimeout","Subscribe","remoteVideo","remoteAudio","parentNode","startConnection","img","add","update","unsubscribe","SubscribeBase"],"mappings":"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"}