{"version":3,"file":"videotime.min.js","sources":["../src/videotime.js"],"sourcesContent":["/*\n * Video time player specific js\n *\n * @package    videotimeplugin_live\n * @module     videotimeplugin_live/videotime\n * @copyright  2022 bdecent gmbh <https://bdecent.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from \"core/ajax\";\nimport VideoTimeBase from \"mod_videotime/videotime\";\nimport Janus from 'block_deft/janus-gateway';\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\nimport PublishBase from \"block_deft/publish\";\nimport SubscribeBase from \"block_deft/subscribe\";\nimport Socket from \"videotimeplugin_live/socket\";\n\nvar rooms = {};\n\nclass Publish extends PublishBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: this.ptype == 'publish',\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0];\n    }\n\n    getTransceiver(id) {\n        let result = null;\n\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n\n            Log.debug(this.videoroom.webrtcStuff.pc.getTransceivers());\n            this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                const sender = transceiver.sender;\n                if (\n                    sender.track\n                    && sender.track.id\n                    && sender.track.id == id\n                    && this.tracks[sender.track.id]\n                ) {\n                    result = transceiver;\n                }\n            });\n        }\n\n        return result;\n    }\n\n    publishFeed() {\n        if (\n            this.videoroom.webrtcStuff.pc\n            && this.videoroom.webrtcStuff.pc.iceConnectionState == 'connected'\n        ) {\n            setTimeout(() => {\n                this.videoroom.webrtcStuff.pc.getTransceivers().forEach(transceiver => {\n                    const sender = transceiver.sender;\n                    if (\n                        sender.track\n                        && this.selectedTrack\n                        && (sender.track.id == this.selectedTrack.id)\n                    ) {\n                        const message = JSON.stringify({\n                            feed: Number(this.peerid),\n                            mid: transceiver.mid\n                        });\n                        this.videoroom.data({\n                            text: message,\n                            error: Log.debug\n                        });\n                    }\n                });\n                return Ajax.call([{\n                    args: {\n                        id: Number(this.peerid),\n                        room: this.roomid,\n                    },\n                    contextid: this.contextid,\n                    fail: Notification.exception,\n                    methodname: 'videotimeplugin_live_publish_feed'\n                }])[0];\n            });\n        }\n    }\n\n    unpublish() {\n        if (this.videoInput) {\n            this.videoInput.then(videoStream => {\n                this.videoInput = null;\n                return videoStream;\n            }).catch(Notification.exception);\n            this.videoroom.send({\n                message: {\n                    request: 'unpublish'\n                }\n            });\n        }\n        if (this.currentCamera) {\n            this.currentCamera = this.currentCamera.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getVideoTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n\n                return null;\n            }).catch(Notification.exception);\n        }\n        if (this.currentDisplay) {\n            this.currentDisplay = this.currentDisplay.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getVideoTracks().forEach(track => {\n                        track.stop();\n                    });\n                }\n\n                return null;\n            }).catch(Notification.exception);\n        }\n        document.querySelectorAll(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"]'\n        ).forEach(button => {\n            button.classList.remove('hidden');\n        });\n        //document.querySelectorAll(\n            //'[data-contextid=\"' + this.contextid + '\"][data-action=\"unpublish\"]'\n        //).forEach(button => {\n            //button.classList.add('hidden');\n        //});\n    }\n\n    onLocalTrack(track, on) {\n        const remoteStream = new MediaStream([track]);\n        if (!on) {\n            return;\n        }\n        remoteStream.mid = track.mid;\n        Log.debug(on);\n        Log.debug(remoteStream);\n        Janus.attachMediaStream(\n            document.getElementById('video-controls-' + this.tracks[track.id]),\n            remoteStream\n        );\n    }\n\n    handleClick(e) {\n        const button = e.target.closest(\n            '[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"],  [data-contextid=\"'\n                + this.contextid + '\"][data-action=\"unpublish\"]'\n        );\n        if (button) {\n            const action = button.getAttribute('data-action'),\n                type = button.getAttribute('data-type') || 'camera';\n            e.stopPropagation();\n            e.preventDefault();\n            document.querySelectorAll(\n                '[data-region=\"deft-venue\"] [data-action=\"publish\"],  [data-region=\"deft-venue\"] [data-action=\"unpublish\"]'\n            ).forEach(button => {\n                if ((button.getAttribute('data-action') != action) || (button.getAttribute('data-type') != type)) {\n                    button.classList.remove('hidden');\n                }\n            });\n            switch (action) {\n                case 'publish':\n                    Log.debug(type);\n                    if (type == 'display') {\n                        this.shareDisplay();\n                    } else {\n                        this.shareCamera();\n                    }\n\n                    this.videoInput.then(videoStream => {\n                        const tracks = [];\n                        this.tracks = this.tracks || {};\n                        if (videoStream) {\n                            Log.debug(videoStream.getVideoTracks());\n                            videoStream.getVideoTracks().forEach(track => {\n                                const transceiver = this.getTransceiver(track.id);\n                                if (!transceiver) {\n                                    tracks.push({\n                                        type: 'video',\n                                        capture: track,\n                                        recv: false\n                                    });\n                                    this.selectedTrack = track;\n                                    this.tracks[track.id] = type;\n                                    Log.debug('New track');\n                                } else {\n                                    const message = JSON.stringify({\n                                        feed: Number(this.peerid),\n                                        mid: transceiver.mid\n                                    });\n                                    this.videoroom.data({\n                                        text: message,\n                                        error: Log.debug\n                                    });\n                                    this.selectedTrack = track.id;\n                                    this.publishFeed();\n                                }\n                            });\n                            videoStream.getAudioTracks().forEach(track => {\n                                tracks.push({\n                                    type: 'audio',\n                                    capture: track,\n                                    recv: false\n                                });\n                            });\n                            if (!tracks.length) {\n                                return videoStream;\n                            }\n                            this.videoroom.createOffer({\n                                tracks: tracks,\n                                success: (jsep) => {\n                                    const publish = {\n                                        request: \"configure\",\n                                        video: true,\n                                        audio: true\n                                    };\n                                    this.videoroom.send({\n                                        message: publish,\n                                        jsep: jsep\n                                    });\n                                },\n                                error: function(error) {\n                                    Notification.alert(\"WebRTC error... \", error.message);\n                                }\n                            });\n                        }\n\n                        return videoStream;\n                    }).catch(Notification.exception);\n                    break;\n                case 'unpublish':\n                    if (this.videoInput) {\n                        this.videoInput.then(videoStream => {\n                            if (videoStream) {\n                                videoStream.getVideoTracks().forEach(track => {\n                                    track.stop();\n                                });\n                            }\n                            this.videoInput = null;\n\n                            return videoStream;\n                        }).catch(Notification.exception);\n                    }\n                    this.videoroom.send({\n                        message: {\n                            request: 'unpublish'\n                        }\n                    });\n                    return Ajax.call([{\n                        args: {\n                            id: Number(this.peerid),\n                            publish: false,\n                            room: this.roomid\n                        },\n                        contextid: this.contextid,\n                        fail: Notification.exception,\n                        methodname: 'videotimeplugin_publish_feed'\n                    }])[0];\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Set video source to user camera\n     */\n    shareCamera() {\n        const videoInput = this.videoInput,\n            currentCamera = this.currentCamera || Promise.resolve(null);\n\n        this.videoInput = currentCamera.then(videoStream => {\n            if (videoStream) {\n                return videoStream;\n            } else {\n                const cameraInput = navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: false\n                });\n\n                this.currentCamera = cameraInput.catch(() => {\n                    return currentCamera;\n                });\n\n                return cameraInput.then(videoStream => {\n                    this.tracks = this.tracks || {};\n                    videoStream.getTracks().forEach(track => {\n                        this.tracks[track.id] = 'camera';\n                    });\n\n                    return videoStream;\n                }).catch((e) => {\n                    Log.debug(e);\n\n                    return videoInput;\n                });\n            }\n        });\n    }\n\n    /**\n     * Set video source to display surface\n     */\n    shareDisplay() {\n        const videoInput = this.videoInput,\n            currentDisplay = this.currentDisplay || Promise.resolve(null),\n            displayInput = navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: false\n        });\n\n        this.videoInput = displayInput.then(videoStream => {\n            if (videoInput) {\n                videoInput.then(videoStream => {\n                    if (videoStream) {\n                        videoStream.getTracks().forEach(track => {\n                            Log.debug(track); //track.stop();\n                        });\n                    }\n                    return videoStream;\n                }).catch(Notification.exception);\n            }\n            this.tracks = this.tracks || {};\n            videoStream.getTracks().forEach(track => {\n                this.tracks[track.id] = 'display';\n            });\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return videoInput;\n        });\n\n        this.currentDisplay = displayInput.then(videoStream => {\n            currentDisplay.then(videoStream => {\n                if (videoStream) {\n                    videoStream.getTracks().forEach(track => {\n                        Log.debug('stop track');\n                        Log.debug(track);\n                        track.stop();\n                    });\n                }\n            });\n\n            return videoStream;\n        }).catch((e) => {\n            Log.debug(e);\n\n            return currentDisplay;\n        });\n    }\n}\n\nexport default class VideoTime extends VideoTimeBase {\n    initialize(contextid, token, peerid) {\n        Log.debug(\"Initializing Video Time \" + this.elementId);\n\n        this.contextid = contextid;\n        this.peerid = peerid;\n\n        Ajax.call([{\n            methodname: 'videotimeplugin_live_get_room',\n            args: {contextid: contextid},\n            done: (response) => {\n                const socket = new Socket(contextid, token);\n\n                this.iceservers = JSON.parse(response.iceservers);\n                this.roomid = response.roomid;\n                this.server = response.server;\n\n                rooms[String(contextid)] = {\n                    contextid: contextid,\n                    peerid: peerid,\n                    roomid: response.roomid,\n                    server: response.server,\n                    iceServers: JSON.parse(response.iceservers)\n                };\n                this.roomid = response.roomid;\n\n                socket.subscribe(() => {\n                    Ajax.call([{\n                        methodname: 'videotimeplugin_live_get_feed',\n                        args: {contextid: contextid},\n                        done: (response) => {\n                            const room = rooms[String(contextid)];\n                            if (room.publish && room.publish.restart) {\n                                if (response.feed == peerid) {\n                                    this.unpublish();\n                                }\n                                room.publish = null;\n                            }\n                            this.subscribeTo(Number(response.feed));\n                        },\n                        fail: Notification.exception\n                    }]);\n                });\n            },\n            fail: Notification.exception\n        }]);\n\n        this.addListeners();\n\n        return true;\n    }\n\n    /**\n     * Register player events to respond to user interaction and play progress.\n     */\n    addListeners() {\n        document.querySelector('body').removeEventListener('click', handleClick);\n        document.querySelector('body').addEventListener('click', handleClick);\n        return;\n    }\n\n    /**\n     * Subscribe to feed\n     *\n     * @param {int} source Feed to subscribe\n     */\n    subscribeTo(source) {\n        document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"][data-action=\"publish\"]').forEach(button => {\n            if (source == Number(this.peerid)) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"][data-action=\"unpublish\"]').forEach(button => {\n            if (source == Number(this.peerid)) {\n                button.classList.remove('hidden');\n            } else {\n                button.classList.remove('hidden');\n            }\n        });\n        Log.debug(source);\n        Log.debug(this.peerid);\n\n        if (this.remoteFeed && !this.remoteFeed.creatingSubscription && !this.remoteFeed.restart) {\n            const update = {\n                request: 'update',\n                subscribe: [{\n                    feed: Number(source)\n                }],\n                unsubscribe: [{\n                    feed: Number(this.remoteFeed.current)\n                }]\n            };\n\n            if (!source && this.remoteFeed.current) {\n                delete update.subscribe;\n            } else if (source && !this.remoteFeed.current) {\n                delete update.unsubscribe;\n            }\n\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed.videoroom.send({message: update});\n                if (this.remoteFeed.current == this.peerid) {\n                    const room = rooms[String(this.contextid)];\n                    room.publish.unpublish();\n                }\n                this.remoteFeed.current = source;\n                Log.debug('[data-contextid=\"' + this.contextid + '\"] img.poster-img');\n                if (source) {\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                        img.classList.add('hidden');\n                    });\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                        img.classList.remove('hidden');\n                    });\n                } else {\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                        img.classList.remove('hidden');\n                    });\n                    document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                        img.classList.add('hidden');\n                    });\n                }\n            }\n        } else if (this.remoteFeed && this.remoteFeed.restart) {\n            if (this.remoteFeed.current != source) {\n                this.remoteFeed = null;\n                this.subscribeTo(source);\n            }\n        } else if (this.remoteFeed) {\n            setTimeout(() => {\n                this.subscribeTo(source);\n            }, 500);\n        } else if (source) {\n            this.remoteFeed = new Subscribe(this.contextid, this.iceservers, this.roomid, this.server, this.peerid, source);\n            this.remoteFeed.remoteVideo = document.getElementById(this.elementId);\n            this.remoteFeed.remoteAudio = document.getElementById(this.elementId).parentNode.querySelector('audio');\n            this.remoteFeed.startConnection(source);\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] img.poster-img').forEach(img => {\n                img.classList.add('hidden');\n            });\n            document.querySelectorAll('[data-contextid=\"' + this.contextid + '\"] video').forEach(img => {\n                img.classList.remove('hidden');\n            });\n        }\n    }\n}\n\nconst handleClick = function(e) {\n    const button = e.target.closest('[data-roomid] [data-action=\"publish\"], [data-roomid] [data-action=\"unpublish\"]');\n    if (button) {\n        const action = button.getAttribute('data-action'),\n            contextid = e.target.closest('[data-contextid]').getAttribute('data-contextid'),\n            room = rooms[String(contextid)],\n            iceServers = room.iceServers,\n            peerid = room.peerid,\n            roomid = room.roomid,\n            server = room.server,\n            type = button.getAttribute('data-type');\n        e.stopPropagation();\n        e.preventDefault();\n        if (action == 'unpublish') {\n            Ajax.call([{\n                args: {\n                    id: Number(peerid),\n                    room: roomid,\n                    publish: false\n                },\n                contextid: contextid,\n                fail: Notification.exception,\n                methodname: 'videotimeplugin_live_publish_feed'\n            }]);\n        } else if (!room.publish || room.publish.restart) {\n            room.publish = new Publish(contextid, iceServers, roomid, server, peerid);\n            if (type == 'display') {\n                room.publish.shareDisplay();\n            } else {\n                room.publish.shareCamera();\n            }\n            room.publish.startConnection();\n        } else {\n            room.publish.handleClick(e);\n        }\n    }\n};\n\nclass Subscribe extends SubscribeBase {\n    /**\n     * Register the room\n     *\n     * @param {object} pluginHandle\n     * @return {Promise}\n     */\n    register(pluginHandle) {\n        // Try a registration\n        return Ajax.call([{\n            args: {\n                handle: pluginHandle.getId(),\n                id: Number(this.peerid),\n                plugin: pluginHandle.plugin,\n                room: this.roomid,\n                ptype: false,\n                feed: this.feed,\n                session: pluginHandle.session.getSessionId()\n            },\n            contextid: this.contextid,\n            fail: Notification.exception,\n            methodname: 'videotimeplugin_live_join_room'\n        }])[0];\n    }\n}\n"],"names":["rooms","Publish","PublishBase","register","pluginHandle","Ajax","call","args","handle","getId","id","Number","this","peerid","plugin","room","roomid","ptype","session","getSessionId","contextid","fail","Notification","exception","methodname","getTransceiver","result","videoroom","webrtcStuff","pc","iceConnectionState","debug","getTransceivers","forEach","transceiver","sender","track","tracks","publishFeed","setTimeout","selectedTrack","message","JSON","stringify","feed","mid","data","text","error","Log","unpublish","videoInput","then","videoStream","catch","send","request","currentCamera","getVideoTracks","stop","currentDisplay","document","querySelectorAll","button","classList","remove","onLocalTrack","on","remoteStream","MediaStream","attachMediaStream","getElementById","handleClick","e","target","closest","action","getAttribute","type","stopPropagation","preventDefault","shareDisplay","shareCamera","push","capture","recv","getAudioTracks","length","createOffer","success","jsep","video","audio","alert","publish","Promise","resolve","cameraInput","navigator","mediaDevices","getUserMedia","getTracks","displayInput","getDisplayMedia","VideoTime","VideoTimeBase","initialize","token","elementId","done","response","socket","Socket","iceservers","parse","server","String","iceServers","subscribe","restart","subscribeTo","addListeners","querySelector","removeEventListener","addEventListener","source","remoteFeed","creatingSubscription","current","Subscribe","remoteVideo","remoteAudio","parentNode","startConnection","img","add","update","unsubscribe","SubscribeBase"],"mappings":"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"}